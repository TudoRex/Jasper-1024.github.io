<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默</title>
  <subtitle>为了生存，而一点点淡忘了最初的本意。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-11T14:55:38.908Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jasper</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android笔记—乐联网上传数据 TCP长连接总结</title>
    <link href="http://yoursite.com/2017/06/11/Android%E7%AC%94%E8%AE%B0-%E4%B9%90%E8%81%94%E7%BD%91%E4%B8%8A%E4%BC%A0%E6%95%B0%E6%8D%AE%20TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/06/11/Android笔记-乐联网上传数据 TCP长连接总结/</id>
    <published>2017-06-11T04:00:00.000Z</published>
    <updated>2017-06-11T14:55:38.908Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>乐联网</li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>毕设中的乐联网部分,记录以供复习</li>
<li>开源在github上</li>
<li><a href="https://github.com/Jasper-1024/HbuLeWei" target="_blank" rel="external">https://github.com/Jasper-1024/HbuLeWei</a></li>
</ul>
<hr>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><ul>
<li>使用okhttp上传数据。</li>
<li>Tcp长连接实现方向控制</li>
<li>以代码为主</li>
</ul>
<h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><ul>
<li><p>okhttp入门</p>
<blockquote>
<p><a href="http://blog.csdn.net/biezhihua/article/details/50603624" target="_blank" rel="external">http://blog.csdn.net/biezhihua/article/details/50603624</a></p>
</blockquote>
</li>
<li><p>乐联网</p>
<blockquote>
<p><a href="https://www.lewei50.com/dev/doc/176" target="_blank" rel="external">https://www.lewei50.com/dev/doc/176</a><br><a href="https://www.lewei50.com/dev/doc/155" target="_blank" rel="external">https://www.lewei50.com/dev/doc/155</a></p>
</blockquote>
</li>
<li><p>Tcp长连接</p>
<blockquote>
<p><a href="http://ls15114843569.blog.51cto.com/11015399/1767195" target="_blank" rel="external">http://ls15114843569.blog.51cto.com/11015399/1767195</a></p>
</blockquote>
</li>
<li><p>简易上传</p>
<blockquote>
<p><a href="http://ls15114843569.blog.51cto.com/11015399/1767195" target="_blank" rel="external">http://ls15114843569.blog.51cto.com/11015399/1767195</a></p>
</blockquote>
</li>
</ul>
<h2 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h2><ul>
<li><p>API介绍</p>
<blockquote>
<p><a href="https://www.lewei50.com/dev/apiinfo/3" target="_blank" rel="external">https://www.lewei50.com/dev/apiinfo/3</a></p>
</blockquote>
</li>
<li><p>API测试</p>
<blockquote>
<p><a href="https://www.lewei50.com/dev/apitest/3" target="_blank" rel="external">https://www.lewei50.com/dev/apitest/3</a></p>
</blockquote>
</li>
<li><p>地址：<a href="http://www.lewei50.com/api/v1/gateway/updatesensors/你的网关号" target="_blank" rel="external">http://www.lewei50.com/api/v1/gateway/updatesensors/你的网关号</a></p>
<p>POST方式</p>
<p>需要配置header头 Userkey</p>
</li>
<li><p>数据发送/返回方式JSON</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"Name"</span>:<span class="string">"T1"</span>,</div><div class="line">      <span class="attr">"Value"</span>:<span class="string">"1"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"Name"</span>:<span class="string">"01H1"</span>,</div><div class="line">      <span class="attr">"Value"</span>:<span class="string">"96.2"</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>返回格式</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Successful"</span>: <span class="literal">true</span>, </div><div class="line">  <span class="attr">"Message"</span>: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>okhttp POST 传感器数据 这里使用了一个静态内部类。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//返回数据处理</span></div><div class="line">  <span class="keyword">public</span> okhttp3.Callback callback = <span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">          <span class="comment">//返回服务器内容</span></div><div class="line">          String responsedata = response.body().string();</div><div class="line">          LogUtil.d(<span class="string">"okHttp"</span>, responsedata);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">          <span class="comment">//异常处理</span></div><div class="line">          LogUtil.d(<span class="string">"okHttp"</span>, <span class="string">"POST错误"</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">//内部类</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</div><div class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class="line">              = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</div><div class="line"><span class="comment">//POST数据，指定接收回掉</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postData</span><span class="params">(String sensor_name, String sensor_data, okhttp3.Callback callback)</span> </span>&#123;</div><div class="line">          OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">          <span class="keyword">final</span> String value =</div><div class="line">                  <span class="string">"["</span> +</div><div class="line">                          <span class="string">"    &#123;"</span> +</div><div class="line">                          <span class="string">"        \"Name\":\""</span> + sensor_name + <span class="string">"\","</span> +</div><div class="line">                          <span class="string">"        \"Value\":\""</span> + sensor_data + <span class="string">"\""</span> +</div><div class="line">                          <span class="string">"    &#125;"</span> +</div><div class="line">                          <span class="string">"]"</span>;</div><div class="line">          RequestBody requestBody = <span class="keyword">new</span> RequestBody() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> MEDIA_TYPE_MARKDOWN;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                  sink.write(value.getBytes());</div><div class="line">              &#125;</div><div class="line">          &#125;;</div><div class="line">          Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                  .url(<span class="string">"http://www.lewei50.com/api/V1/gateway/UpdateSensors/01"</span>)</div><div class="line">                  .header(<span class="string">"userkey"</span>, <span class="string">"你的userkey"</span>)</div><div class="line">                  .post(requestBody)</div><div class="line">                  .build();</div><div class="line">          client.newCall(request).enqueue(callback);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>实际使用 放在一个后台服务内，调用相当简单<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Http.postData(<span class="string">"PM2.5"</span>, <span class="string">"你的数据转为String"</span>, callback);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Tcp长连接，远程控制"><a href="#Tcp长连接，远程控制" class="headerlink" title="Tcp长连接，远程控制"></a>Tcp长连接，远程控制</h2><ul>
<li>首先参考<a href="https://wenku.baidu.com/view/f3457b63dd3383c4bb4cd2f0.html" target="_blank" rel="external">乐联网反向控制教程</a>，新建一个控制器，这里以开关为例。</li>
<li>原理是与服务器保持一个TCP长连接，不到40s刷新一次，以此保持通道，与被控制段通信，发送控制信息。</li>
<li><p>Tcp长连接参考了@墨迹流韶的<a href="http://blog.cocoper.com/2017/01/21/Android/Common/2017-01-21-Android%E5%9F%BA%E4%BA%8ETcp%E5%8D%8F%E8%AE%AE%E7%9A%84Socket%E9%95%BF%E9%93%BE%E6%8E%A5%E5%B0%81%E8%A3%85/" target="_blank" rel="external">Android基于Tcp协议的Socket长链接封装</a></p>
</li>
<li><p>地址 tcp.lewei50.com<br>端口号 9960<br>心跳包间隔 1min以内</p>
</li>
<li><p>发送/接收数据格式 Json<br>本地发送数据格式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line">  "method": "update",</div><div class="line"></div><div class="line">  "gatewayNo": "你的网关号",</div><div class="line"></div><div class="line">  "userkey": "你的userkey"</div><div class="line"></div><div class="line">&#125;&amp;^!</div></pre></td></tr></table></figure>
<p>服务器发送控制命令格式，数据处理时需要去掉字符串最后的&amp;^! </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">"method":"send",</div><div class="line"></div><div class="line">"gatewayNo":"01",</div><div class="line"></div><div class="line">"userkey":"6d16ddb3c58c4e448a7e15e7acxxxxxx",</div><div class="line"></div><div class="line">"f":" updateSensor",</div><div class="line"></div><div class="line">"p1":"D1",</div><div class="line"></div><div class="line">"p2":"1"</div><div class="line"></div><div class="line">&#125;&amp;^!</div></pre></td></tr></table></figure>
<p>本地响应控制命令后返回数据格式</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="attr">"method"</span>:<span class="string">"response"</span>,</div><div class="line"></div><div class="line"><span class="attr">"result"</span>:&#123;</div><div class="line">	</div><div class="line">  <span class="attr">"successful"</span>:<span class="literal">true</span>,</div><div class="line">  </div><div class="line">  <span class="attr">"message"</span>:<span class="string">"ok!"</span>,</div><div class="line">  </div><div class="line">  <span class="attr">"data"</span>:[&#123;</div><div class="line">	    </div><div class="line">       <span class="attr">"id"</span>:<span class="string">"D1"</span>,</div><div class="line">      </div><div class="line">  	<span class="attr">"value"</span>:<span class="string">"1"</span></div><div class="line">  	</div><div class="line">    &#125;,</div><div class="line">  </div><div class="line">&#125;&amp;^!</div></pre></td></tr></table></figure>
</li>
<li><p>TCP连接类  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpSocketHelper</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String mTag = <span class="string">"TcpSocketHelper"</span>;</div><div class="line">  <span class="keyword">private</span> Socket socket;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> _connect;</div><div class="line">  <span class="keyword">private</span> ReceiveThread mReceiveThread;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> receiveStop;</div><div class="line">  <span class="keyword">private</span> Date lastKeepAliveOkTime;</div><div class="line">  <span class="keyword">private</span> OnRecivedListener mRecivedListener;</div><div class="line">  <span class="comment">//地址</span></div><div class="line">  <span class="keyword">private</span> String mIpAddr = <span class="string">"http://tcp.lewei50.com"</span>;</div><div class="line">  <span class="comment">//端口</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mPort = <span class="number">9960</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 开启链接socket</div><div class="line">   * <span class="doctag">@param</span> ipAddr</div><div class="line">   * <span class="doctag">@param</span> port</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startConnect</span><span class="params">(String ipAddr, <span class="keyword">int</span> port)</span></span>&#123;</div><div class="line">      LogUtil.d(mTag, <span class="string">"准备链接..."</span>);</div><div class="line">      <span class="keyword">this</span>.mIpAddr = ipAddr;</div><div class="line">      <span class="keyword">this</span>.mPort = port;</div><div class="line">      InetAddress serverAddr;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          socket = <span class="keyword">new</span> Socket(ipAddr, port);</div><div class="line">          LogUtil.d(mTag, <span class="string">"准备链接..."</span>);</div><div class="line">          _connect = <span class="keyword">true</span>;</div><div class="line">          mReceiveThread = <span class="keyword">new</span> ReceiveThread();</div><div class="line">          receiveStop = <span class="keyword">false</span>;</div><div class="line">          mReceiveThread.start();</div><div class="line">          LogUtil.d(mTag, <span class="string">"链接成功..."</span>);</div><div class="line"></div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          LogUtil.d(mTag, <span class="string">"链接出错..."</span> + e.getMessage());</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 关闭链接</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnect</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">if</span> (socket != <span class="keyword">null</span>)&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              socket.close();</div><div class="line">              socket = <span class="keyword">null</span>;</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 保持心跳</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">KeepAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// 判断socket是否已断开,断开就重连</span></div><div class="line">      <span class="keyword">if</span> (lastKeepAliveOkTime != <span class="keyword">null</span>) &#123;</div><div class="line">          LogUtil.d(mTag, <span class="string">"上次心跳成功时间:"</span>+ DateFormat.format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, lastKeepAliveOkTime));</div><div class="line">          Date now = Calendar.getInstance().getTime();</div><div class="line">          <span class="keyword">long</span> between = (now.getTime() - lastKeepAliveOkTime.getTime());<span class="comment">// 得到两者的毫秒数</span></div><div class="line">          <span class="keyword">if</span> (between &gt; <span class="number">60</span> * <span class="number">1000</span>) &#123;</div><div class="line">              LogUtil.d(mTag, <span class="string">"心跳异常超过40,重新连接:"</span>);</div><div class="line">              lastKeepAliveOkTime = <span class="keyword">null</span>;</div><div class="line">              socket = <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          lastKeepAliveOkTime = Calendar.getInstance().getTime();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!checkIsAlive()) &#123;</div><div class="line">          LogUtil.d(mTag, <span class="string">"链接已断开,重新连接."</span>);</div><div class="line">          startConnect(mIpAddr, mPort);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 此方法是检测是否连接</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkIsAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (socket == <span class="keyword">null</span>||!socket.isConnected())</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 发送数据的方法</div><div class="line">   * <span class="doctag">@param</span> msg</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendmessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">      <span class="keyword">boolean</span> isAlive = checkIsAlive();</div><div class="line">      <span class="keyword">if</span> (!isAlive)</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      LogUtil.d(mTag, <span class="string">"准备发送消息:"</span> + msg);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isConnected()) &#123;</div><div class="line">              <span class="keyword">if</span> (!socket.isOutputShutdown()) &#123;</div><div class="line"></div><div class="line">                  <span class="comment">//2.得到socket读写流</span></div><div class="line">                  OutputStream os=socket.getOutputStream();</div><div class="line">                  <span class="comment">//true:是否自动flush</span></div><div class="line">                  PrintWriter outStream=<span class="keyword">new</span> PrintWriter(os, <span class="keyword">true</span>);</div><div class="line">                  outStream.print(msg);</div><div class="line">                  outStream.flush();</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          LogUtil.d(mTag, <span class="string">"发送成功!"</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 设置接收数据监听器</div><div class="line">   * <span class="doctag">@param</span> mRecivedListener</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmRecivedListener</span><span class="params">(OnRecivedListener mRecivedListener)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.mRecivedListener = mRecivedListener;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 数据接收线程</div><div class="line">   */</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReceiveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  sleep(<span class="number">2000</span>);</div><div class="line">                    <span class="comment">// 判断 Socket 是否处于连接状态</span></div><div class="line">                  <span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isConnected()) &#123;</div><div class="line">                      <span class="comment">// 客户端接收服务器端的响应，读取服务器端向客户端的输入流</span></div><div class="line">                      InputStream isRead = socket.getInputStream();</div><div class="line">                      <span class="comment">// 缓冲区</span></div><div class="line">                      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[isRead.available()];</div><div class="line">                      <span class="comment">// 读取缓冲区</span></div><div class="line">                      isRead.read(buffer);</div><div class="line">                      <span class="comment">// 转换为字符串</span></div><div class="line">                      String responseInfo = <span class="keyword">new</span> String(buffer);</div><div class="line">                      <span class="comment">// 日志中输出</span></div><div class="line">                      <span class="keyword">if</span>(responseInfo != <span class="keyword">null</span>&amp;&amp;!responseInfo.equals(<span class="string">""</span>))&#123;</div><div class="line">                          LogUtil.d(<span class="string">"TcpManager"</span>, <span class="string">"返回："</span>+responseInfo);</div><div class="line">                          mRecivedListener.onRecived(responseInfo);</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      lastKeepAliveOkTime = Calendar.getInstance().getTime();</div><div class="line">                      KeepAlive();</div><div class="line"></div><div class="line">                      <span class="keyword">continue</span>;</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="keyword">if</span> (socket != <span class="keyword">null</span>)</div><div class="line">                          LogUtil.d(mTag, <span class="string">"链接状态:"</span> + socket.isConnected());</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                  LogUtil.d(mTag, <span class="string">"监听出错:"</span> + e.toString());</div><div class="line">                  e.printStackTrace();</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用,包装在一个后台service中，在service中实现TcpSocketHelper的onRecived方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  //tcp返回信息</div><div class="line">  @Override</div><div class="line">  public void onRecived(String data) &#123;</div><div class="line">      LogUtil.d(&quot;okHttpService&quot;, data);</div><div class="line">      //处理服务器发回的数据      </div><div class="line">  &#125;</div><div class="line"></div><div class="line">TcpSocketHelper tcpSocketHelper  = new TcpSocketHelper();</div><div class="line">tcpSocketHelper.startConnect(&quot;tcp.lewei50.com&quot;, 9960);</div><div class="line">//设置监听</div><div class="line">tcpSocketHelper.setmRecivedListener(this);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>发送心跳包<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String value =</div><div class="line">          <span class="string">"    &#123;"</span> +</div><div class="line">                  <span class="string">"        \"method\":\"update\","</span> +</div><div class="line">                  <span class="string">"        \"gatewayNo\":\"01\","</span> +</div><div class="line">                  <span class="string">"        \"userkey\":\"你的userkey\""</span> +</div><div class="line">                  <span class="string">"    &#125;&amp;^!"</span>;</div><div class="line"> <span class="comment">//发送数据</span></div><div class="line"> tcpSocketHelper.sendmessage(value);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>处理数据 在service的onRecived中</p>
</li>
<li><p>本地处理完毕后，向服务器返回被控制器状态</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String value5 = <span class="string">"&#123;\"method\":\"response\",\"result\":&#123;\"successful\":true,\"message\":\"ok!\",\"data\":[&#123;\"id\":\"D1\",\"value \":\"1\"&#125;]&#125;&#125;&amp;^! "</span>;</div><div class="line"> </div><div class="line">tcpSocketHelper.sendmessage(value6);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乐联网&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导语&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕设中的乐联网部分,记录以供复习&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="毕设" scheme="http://yoursite.com/tags/%E6%AF%95%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记-自用MVP框架</title>
    <link href="http://yoursite.com/2017/05/08/Android%E7%AC%94%E8%AE%B0-%E8%87%AA%E7%94%A8MVP%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2017/05/08/Android笔记-自用MVP框架/</id>
    <published>2017-05-08T04:00:00.000Z</published>
    <updated>2017-05-09T15:19:29.284Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>网络</li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>转眼刚用上手的MVP又不符合需求了，还是总结一下，继续MVVM吧。</li>
</ul>
<hr>
<h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><ul>
<li><p>主要内容是转载，搭建小工程应该足够了。<br><a href="http://blog.csdn.net/dantestones/article/details/50899235" target="_blank" rel="external">Android mvp 架构的自述</a><br><a href="http://blog.csdn.net/dantestones/article/details/51445208" target="_blank" rel="external">如何更高效的使用MVP以及官方MVP架构解析</a></p>
</li>
<li><p>框架开源在GitHub 地址<a href="https://github.com/Jasper-1024/MvpTest" target="_blank" rel="external">点我直达</a></p>
</li>
<li><p>好，我们开始吧！</p>
</li>
</ul>
<hr>
<h3 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC MVP MVVM"></a>MVC MVP MVVM</h3><ul>
<li>省略200行，详情看<a href="https://www.tianmaying.com/tutorial/AndroidMVC" target="_blank" rel="external">Android App的设计架构：MVC,MVP,MVVM与架构经验谈</a></li>
<li>再累赘属于掉书袋了，作者写的是很用心，恩，MVVM也有。</li>
</ul>
<h3 id="框架详解"><a href="#框架详解" class="headerlink" title="框架详解"></a>框架详解</h3><ul>
<li><p>整个框架截图<br>  <img src="http://cdn5.snapgram.co/images/2017/05/09/ScreenShot_20170509215208.png" alt="ScreenShot_20170509215208.png"></p>
</li>
<li><p>整体层次比较明确了，BaseClass 里存放基类，Model层存放数据存储有关类、Presenter层存放逻辑代码、View层存放Activity、frament等。</p>
</li>
<li>这个框架是由MVP在Android中应用存在的问题而搭建的，基类中代码也由此而来。</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li><p>presenter一直持有Activity对象导致的内存泄漏问题</p>
<ul>
<li>使用mvp的时候，presenter会持有view，如果presenter有后台异步的长时间的动作，比如网络请求，这时如果返回退出了Activity，后台异步的动作不会立即停止，这里就会有内存泄漏的隐患。</li>
<li>需要一个销毁view的方法，这里是在基类中完成的。</li>
</ul>
</li>
<li><p>presenter绑定和解绑繁琐</p>
<ul>
<li>一般一个presenter对应一个Activity，一般应用内存在多个Actiivity，绑定与解绑相当繁琐。</li>
<li>统一在 Basepresenter 与 BaseActivity中进行，同时解决内存泄漏问题，还有其他常用内容一并添加。</li>
</ul>
</li>
<li><p>presenter 与 Model 的通信问题。</p>
<ul>
<li>presenter已经与View层 强耦合了，框架中需要解耦presenter 与 Model ，使用异步通信。Handle等都太复杂了。。。</li>
<li>开始没有什么好的解决办法，直到遇到了EventBus，当然EventBus也不是万能解决方案，跨进程，还是要另辟蹊径，不过EventBus足够自己写着完了。还有Rxjava，恩，还在玩着，没搞太懂。</li>
</ul>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>BasePresenter<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">Viewinterface</span>&gt; </span>&#123;</div><div class="line">   <span class="comment">//传入泛型</span></div><div class="line">   <span class="keyword">public</span> Viewinterface mView;</div><div class="line">   <span class="comment">//绑定</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Viewinterface mView)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.mView = mView;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//解绑，防止view为空是内存泄漏</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dettach</span><span class="params">()</span> </span>&#123;</div><div class="line">       mView = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>BaseActivity<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> &lt;<span class="title">Viewinterface</span>,<span class="title">mPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">Viewinterface</span>&gt;&gt;<span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">   <span class="comment">//获取Presenter对象</span></div><div class="line">   <span class="keyword">public</span> mPresenter mpresenter;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">       <span class="comment">//Presenter实例化</span></div><div class="line">       mpresenter = initPresenter();</div><div class="line">       <span class="comment">//打印当前activity</span></div><div class="line">       LogUtil.d(<span class="string">"Activity"</span>, getClass().getSimpleName()+<span class="string">"onCreate"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//重新刷新时重新绑定view</span></div><div class="line">       mpresenter.attach((Viewinterface) <span class="keyword">this</span>);</div><div class="line">       <span class="keyword">super</span>.onResume();</div><div class="line">       LogUtil.d(<span class="string">"Activity"</span>, getClass().getSimpleName()+<span class="string">"onResume"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//解绑presenter持有的view</span></div><div class="line">       mpresenter.dettach();</div><div class="line">       <span class="keyword">super</span>.onDestroy();</div><div class="line">       LogUtil.d(<span class="string">"Activity"</span>, getClass().getSimpleName()+<span class="string">"onDestroy"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> mPresenter <span class="title">initPresenter</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>Presenter<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>mPresenter<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">Viewif</span>&gt; <span class="keyword">implements</span> <span class="title">Presenter</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> Model mModel;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">mPresenter</span><span class="params">(Viewif view)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.attach(view);</div><div class="line">       <span class="keyword">this</span>.mModel = <span class="keyword">new</span> mModel();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>BaseView</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt;  </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Viewif </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Viewif</span> <span class="keyword">extends</span> <span class="title">BaseView</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>MainActivity<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">Viewif</span>, <span class="title">mPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">Viewif</span></span>&#123;</div><div class="line"></div><div class="line">   Presenter presenter;</div><div class="line">   <span class="comment">//Presenter初始化</span></div><div class="line">   <span class="function"><span class="keyword">public</span> mPresenter <span class="title">initPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> mPresenter(<span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="comment">//presenter初始化</span></div><div class="line">       presenter = mpresenter;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.activity_main);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>LogUtil<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERBOSE = <span class="number">1</span>;<span class="comment">//啰嗦，等级最低的</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;<span class="comment">//调试</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFO = <span class="number">3</span>;<span class="comment">//信息</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARN = <span class="number">4</span>;<span class="comment">//警告</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR = <span class="number">5</span>;<span class="comment">//错误</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTHING = <span class="number">6</span>;<span class="comment">//什么也不打印出来</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> level = VERBOSE;<span class="comment">//LEVEL:标准</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String tag, String msg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (level &lt;= VERBOSE) &#123;<span class="comment">//如果大于或者等于定义的标准就打印出来</span></div><div class="line">           Log.v(tag, msg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (level &lt;= DEBUG) &#123;</div><div class="line">           Log.d(tag, msg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String tag, String msg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (level &lt;= INFO) &#123;</div><div class="line">           Log.i(tag, msg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String tag, String msg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (level &lt;= WARN) &#123;</div><div class="line">           Log.w(tag, msg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String tag, String msg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (level &lt;= ERROR) &#123;</div><div class="line">           Log.e(tag, msg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导语&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转眼刚用上手的MVP又不符合需求了，还是总结一下，
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—蓝牙串口(BlueTooth+EventBus)</title>
    <link href="http://yoursite.com/2017/04/17/Android%E7%AC%94%E8%AE%B0-%E8%93%9D%E7%89%99%E4%B8%B2%E5%8F%A3%E4%B8%80%E7%A7%8D%E6%96%B9%E6%A1%88BlueTooth+EventBus/"/>
    <id>http://yoursite.com/2017/04/17/Android笔记-蓝牙串口一种方案BlueTooth+EventBus/</id>
    <published>2017-04-17T04:00:00.000Z</published>
    <updated>2017-06-11T12:40:33.649Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>毕设中的蓝牙部分,记录以供复习</li>
</ul>
<hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><ul>
<li><p>Android应用 与 Hc-05 蓝牙模块连接,单片机与 Android 端 可以通过串口正常收发数据.</p>
</li>
<li><p>预留足够灵活的接口, Android 应用中可以在任意位置获取到蓝牙数据</p>
</li>
<li><p>Activity切换时,蓝牙连接不断开.</p>
</li>
</ul>
<h3 id="用到的开源库-知识点资料-简介-来源"><a href="#用到的开源库-知识点资料-简介-来源" class="headerlink" title="用到的开源库/知识点资料 简介/来源"></a>用到的开源库/知识点资料 简介/来源</h3><ul>
<li><p>蓝牙:<br><a href="https://developer.android.com/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">Android API 指南</a></p>
<blockquote>
<p><a href="https://developer.android.com/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">https://developer.android.com/guide/topics/connectivity/bluetooth.html</a></p>
</blockquote>
</li>
<li><p>EventBus:<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus-GitHub</a> 是一个Android端优化的publish/subscribe消息总线,用来替代 Intent 、   Handler 、 Broadcast 等在 Actvity 、 Fragment 、 Service 等组件之间传递信息 . EventBus 可以传递一个完整的对象,简单高效, <strong>注意 EventBus 只能在多线程之间传递消息,无法在不同进程之间传递消息</strong> ,EventBus 3.0 以后进一步简化了传递方式,真的是很值得学习的一个开源库!</p>
<p>参考资料如下:</p>
<p><a href="http://www.jianshu.com/p/acfe78296bb5" target="_blank" rel="external">EventBus 3.0初探: 入门使用及其使用 完全解析</a></p>
<p> <a href="http://www.jianshu.com/p/1eaca34e5314" target="_blank" rel="external">EventBus3(3.0.0)源码解析</a></p>
</li>
</ul>
<hr>
<h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><ul>
<li>蓝牙 与 EventBus 基础部分</li>
</ul>
<h3 id="BlueTooth"><a href="#BlueTooth" class="headerlink" title="BlueTooth"></a>BlueTooth</h3><hr>
<ul>
<li>备注 : 这里使用的是 传统蓝牙 即 蓝牙4.0以前版本, 而不是 蓝牙4.0 ( ble低功耗蓝牙)及以后版本 </li>
</ul>
<hr>
<ul>
<li>Android 对 Bluetooth 做了很好的封装,我们可以比较轻松的在 Android Bluetooth API 上进行开发.</li>
<li>Android中所有蓝牙API均来自 android.bluetooth 包</li>
</ul>
<h4 id="BlueTooth基础"><a href="#BlueTooth基础" class="headerlink" title="BlueTooth基础"></a>BlueTooth基础</h4><ul>
<li><p>BluetoothAdapter 本地蓝牙适配器<br>BluetoothAdapter 是所有蓝牙交互的入口点, 在初始化蓝牙及蓝牙配对阶段使用<br>1.发现其他蓝牙设备<br>2.查询绑定（配对）设备的列表<br>3.使用已知的 MAC 地址实例化 BluetoothDevice<br>4.创建 BluetoothServerSocket 侦听来自其他设备的通信。</p>
</li>
<li><p>BluetoothDevice 远程蓝牙设备<br>含有该设备的信息，例如设备的名称、地址、类和绑定状态等。</p>
</li>
<li><p>BluetoothSocket 蓝牙套接字接口（与 TCP Socket 相似）<br>与 BluetoothDevice 配合建立远程连接,允许应用通过 InputStream 和 OutputStream 与其他蓝牙设备交换数据.</p>
</li>
</ul>
<h4 id="初始化蓝牙"><a href="#初始化蓝牙" class="headerlink" title="初始化蓝牙"></a>初始化蓝牙</h4><ul>
<li><p>声明蓝牙权限<br>Android 应用使用蓝牙前都需要声明蓝牙权限<br>一般只需要  BLUETOOTH 权限即可,但是考虑到之后有更多的需求,需要更改系统蓝牙设置,由此需要 BLUETOOTH<em>ADMIN 权限</em>也一起声明</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ... &gt;</div><div class="line">&lt;uses-permission android:name="android.permission.BLUETOOTH" /&gt;</div><div class="line">&lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN" /&gt;</div><div class="line">...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>蓝牙设备可用性  获取 BluetoothAdapter<br>获取 BluetoothAdapter，需要静态 getDefaultAdapter() 方法。getDefaultAdapter() 会返回一个表示设备自身的蓝牙适配器的 BluetoothAdapter 设备不支持蓝牙 则返回 null</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line"><span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">  <span class="comment">// 蓝牙不可用操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>开启蓝牙<br>BluetoothAdapter 的 .isEnabled() 可以判断系统蓝牙是否开启.<br>没有开启时 startActivityForResult() 发送包含  ACTION_REQUEST_ENABLE  的 Intent 请求系统开启蓝牙,并在 onActivityResult() 返回的数据中 RESULT_CANCELED 表示开启失败 RESULT_OK  表示开启成功,这里我们只检测开启失败情况,并提示用户 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">  Intent enableBtIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">  startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (requestCode == REQUEST_ENABLE_BT &amp;&amp; resultCode == RESULT_CANCELED) &#123;</div><div class="line">          Toast.makeText(MyApplication.getContext(),R.string.Bluetooth_openfail, Toast.LENGTH_SHORT).show();</div><div class="line">      &#125;</div><div class="line">      BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line">      <span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//设备不支持蓝牙时处理</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>查询已配对的设备<br>调用 getBondedDevices(),返回已配对设备的一组 BluetoothDevice.之后使用for循环遍历</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Set&lt;BluetoothDevice&gt; pairedDevices = mBluetoothAdapter.getBondedDevices();</div><div class="line"><span class="keyword">if</span> (pairedDevices.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//重新加载bluetoothDeviceList</span></div><div class="line">        bluetoothDeviceList.clear();</div><div class="line">        <span class="comment">//BluetoothDevice列表循环</span></div><div class="line">        <span class="keyword">for</span> (BluetoothDevice device : pairedDevices) &#123;</div><div class="line">          bluetoothDeviceList.add(device);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>扫描设备<br>查找设备是非常耗费系统资源的事项，需要安排在子线程中执行，这里没有用到，由需要请参考Google官方蓝牙教程</p>
</li>
<li><p>连接设备<br>蓝牙分主从机，链接为服务器/客户端。这里使用的是连接为客户端。</p>
<ul>
<li>首先获取远程设备的 BluetoothDevice 对象，即在选择设备阶段的BluetoothDevice</li>
<li>调用 createRfcommSocketToServiceRecord(UUID) 获取 BluetoothSocket，UUID通用唯一识别码 在蓝牙中具体是什么没有很好的解释。这里的值取的是<br><code>&quot;00001101-0000-1000-8000-00805F9B34FB&quot;</code></li>
<li>调用 connect() 发起连接,阻塞调用，需要在子线程中执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//蓝牙连接子线程</span></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothSocket mmSocket;</div><div class="line"></div><div class="line">    <span class="comment">//解析函数</span></div><div class="line">    ConnectThread(BluetoothDevice bluetoothDevice) &#123;</div><div class="line">        <span class="comment">// 使用一个中间变量 tmp</span></div><div class="line">        <span class="comment">// mmSocket 类型是 final</span></div><div class="line"></div><div class="line">        BluetoothSocket tmp = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 获取 BluetoothSocket</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// MY_UUID is the app's UUID string, also used by the server code</span></div><div class="line">            tmp = bluetoothDevice.createRfcommSocketToServiceRecord(UUID.fromString(MyApplication.MY_UUID));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//赋值给 mmSocket</span></div><div class="line">        mmSocket = tmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 关闭蓝牙扫描</span></div><div class="line">        MyApplication.getBluetoothAdapter().cancelDiscovery();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 通过 socket 连接到设备. connect() 会一直执行直到成功连接或者抛出异常</span></div><div class="line">            mmSocket.connect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException connectException) &#123;</div><div class="line">            <span class="comment">//无法连接到蓝牙,关闭连接并退出</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mmSocket.close();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//没有正常关闭</span></div><div class="line">            <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Do work to manage the connection (in a separate thread)</span></div><div class="line">        mConnectedThread = <span class="keyword">new</span> ConnectedThread(mmSocket);</div><div class="line">        mConnectedThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 关闭蓝牙连接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mmSocket.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>管理连接<br>获取BluetoothSocket<br>获取 InputStream 和 OutputStream， getInputStream() 和 getOutputStream() 来处理数据传输。read(byte[]) 和 write(byte[]) 读取数据并写入到流式传输。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">      <span class="comment">//BluetoothSocket</span></div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> BluetoothSocket mmSocket;</div><div class="line">      <span class="comment">//输入流</span></div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> InputStream mmInStream;</div><div class="line">      <span class="comment">//输出流</span></div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> OutputStream mmOutStream;</div><div class="line"></div><div class="line">      ConnectedThread(BluetoothSocket socket) &#123;</div><div class="line">          <span class="comment">//传入BluetoothSocket，实例化mmSocket</span></div><div class="line">          mmSocket = socket;</div><div class="line">          <span class="comment">//输入/输出流 中间变量</span></div><div class="line">          InputStream tmpIn = <span class="keyword">null</span>;</div><div class="line">          OutputStream tmpOut = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">          <span class="comment">// 输入输出流实例化</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              tmpIn = socket.getInputStream();</div><div class="line">              tmpOut = socket.getOutputStream();</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">          mmInStream = tmpIn;</div><div class="line">          mmOutStream = tmpOut;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">          <span class="keyword">int</span> bytes;</div><div class="line">          <span class="comment">// 连接成功时</span></div><div class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  <span class="comment">// 在InputStream读数据</span></div><div class="line">                  bytes = mmInStream.read();</div><div class="line">                  <span class="comment">//发送数据</span></div><div class="line">                  Events.bluetooth_Recycle bluetooth_recycle = <span class="keyword">new</span> Events.bluetooth_Recycle();</div><div class="line">                  bluetooth_recycle.s = bytes;</div><div class="line">                  bluetooth_recycle.bytes = String.valueOf((<span class="keyword">char</span>) bytes);</div><div class="line">                  EventBus.getDefault().post(bluetooth_recycle);</div><div class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//写方法</span></div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              mmOutStream.write(bytes);</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//关闭流连接</span></div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              mmSocket.close();</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><ul>
<li>直接放链接了<blockquote>
<p><a href="http://www.jianshu.com/p/a040955194fc" target="_blank" rel="external">http://www.jianshu.com/p/a040955194fc</a><br><a href="http://www.jianshu.com/p/acfe78296bb5" target="_blank" rel="external">http://www.jianshu.com/p/acfe78296bb5</a><br><a href="http://www.ff50.net/view/40565212977623506063.html" target="_blank" rel="external">http://www.ff50.net/view/40565212977623506063.html</a></p>
</blockquote>
</li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul>
<li><p>蓝牙连接子线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> BluetoothSocket mmSocket;</div><div class="line"></div><div class="line">      <span class="comment">//解析函数</span></div><div class="line">      ConnectThread(BluetoothDevice bluetoothDevice) &#123;</div><div class="line">          <span class="comment">// 使用一个中间变量 tmp</span></div><div class="line">          <span class="comment">// mmSocket 类型是 final</span></div><div class="line"></div><div class="line">          BluetoothSocket tmp = <span class="keyword">null</span>;</div><div class="line">          <span class="comment">// 获取 BluetoothSocket</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="comment">// MY_UUID is the app's UUID string, also used by the server code</span></div><div class="line">              tmp = bluetoothDevice.createRfcommSocketToServiceRecord(UUID.fromString(MyApplication.MY_UUID));</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//赋值给 mmSocket</span></div><div class="line">          mmSocket = tmp;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="comment">// 关闭蓝牙扫描</span></div><div class="line">          MyApplication.getBluetoothAdapter().cancelDiscovery();</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="comment">// 通过 socket 连接到设备. connect() 会一直执行直到成功连接或者抛出异常</span></div><div class="line">              mmSocket.connect();</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException connectException) &#123;</div><div class="line">              <span class="comment">//无法连接到蓝牙,关闭连接并退出</span></div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  mmSocket.close();</div><div class="line">              &#125;</div><div class="line">              <span class="comment">//没有正常关闭</span></div><div class="line">              <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// Do work to manage the connection (in a separate thread)</span></div><div class="line">          mConnectedThread = <span class="keyword">new</span> ConnectedThread(mmSocket);</div><div class="line">          mConnectedThread.start();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * 关闭蓝牙连接</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              mmSocket.close();</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>管理连接子线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//管理连接子线程</span></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="comment">//BluetoothSocket</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothSocket mmSocket;</div><div class="line">    <span class="comment">//输入流</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputStream mmInStream;</div><div class="line">    <span class="comment">//输出流</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OutputStream mmOutStream;</div><div class="line"></div><div class="line">    ConnectedThread(BluetoothSocket socket) &#123;</div><div class="line">        <span class="comment">//传入BluetoothSocket，实例化mmSocket</span></div><div class="line">        mmSocket = socket;</div><div class="line">        <span class="comment">//输入/输出流 中间变量</span></div><div class="line">        InputStream tmpIn = <span class="keyword">null</span>;</div><div class="line">        OutputStream tmpOut = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 输入输出流实例化</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tmpIn = socket.getInputStream();</div><div class="line">            tmpOut = socket.getOutputStream();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        mmInStream = tmpIn;</div><div class="line">        mmOutStream = tmpOut;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> bytes;</div><div class="line">        <span class="comment">// 连接成功时</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 在InputStream读数据</span></div><div class="line">                bytes = mmInStream.read();</div><div class="line">                <span class="comment">//发送数据</span></div><div class="line">                Events.bluetooth_Recycle bluetooth_recycle = <span class="keyword">new</span> Events.bluetooth_Recycle();</div><div class="line">                bluetooth_recycle.s = bytes;</div><div class="line">                bluetooth_recycle.bytes = String.valueOf((<span class="keyword">char</span>) bytes);</div><div class="line">                EventBus.getDefault().post(bluetooth_recycle);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//写方法</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mmOutStream.write(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//关闭流连接</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mmSocket.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>连接蓝牙<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//连接线程</span></div><div class="line"><span class="keyword">private</span> ConnectThread mConnectThread;</div><div class="line"><span class="comment">//管理连接进程</span></div><div class="line"><span class="keyword">private</span> ConnectedThread mConnectedThread;</div><div class="line"></div><div class="line"><span class="comment">//创建连接子线程</span></div><div class="line">mConnectThread = <span class="keyword">new</span> ConnectThread(bluetoothDevice);</div><div class="line"><span class="comment">//启动连接子线程</span></div><div class="line">mConnectThread.start();</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>向蓝牙写入数据<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//发送数据String,        主线程            优先级4       非粘性事件</span></div><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN, priority = <span class="number">4</span>, sticky = <span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Events.bluetooth_Send bluetoothSend)</span> </span>&#123;</div><div class="line">    String bytes = bluetoothSend.bytes;</div><div class="line">    mConnectedThread.write(bytes.getBytes());</div><div class="line">    LogUtil.d(Tag, <span class="string">"onEvent:Send"</span> + bluetoothSend.bytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>接收数据处理<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//数据转换                后台进程            优先级3       非粘性事件</span></div><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND, priority = <span class="number">3</span>, sticky = <span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Events.bluetooth_Transformers bluetoothTransformers)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> bytes = bluetoothTransformers.bytes;</div><div class="line">    <span class="comment">//处理数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导语&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕设中的蓝牙部分,记录以供复习&lt;/
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="毕设" scheme="http://yoursite.com/tags/%E6%AF%95%E8%AE%BE/"/>
    
      <category term="BlueTooth" scheme="http://yoursite.com/tags/BlueTooth/"/>
    
  </entry>
  
  <entry>
    <title>科学上网教程（三）——VPS安全加固</title>
    <link href="http://yoursite.com/2017/04/08/VPS%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B3/"/>
    <id>http://yoursite.com/2017/04/08/VPS科学上网教程3/</id>
    <published>2017-04-08T09:52:16.000Z</published>
    <updated>2017-04-08T05:31:37.483Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">更新</div><div class="line"><span class="number">2017.04</span>.<span class="number">08</span>  VPS日常一些安全措施</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><p>导语<br>科学上网教程系列，很久没有更新新内容了。更新常用安全措施，至少保证，不会被轻易的当作肉鸡。都是一些常用的安全措施。</p>
</li>
<li><p>系统环境：CentOS</p>
</li>
</ul>
<hr>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul>
<li>有两种方案<ul>
<li>彻底关闭SSH登陆，改为密钥登陆，安全性最高，但配置较为复杂</li>
<li>修改SSH登陆端口，同时开放默认端口，将爆破 ssh 密码的 IP 封停<h3 id="密钥登陆"><a href="#密钥登陆" class="headerlink" title="密钥登陆"></a>密钥登陆</h3></li>
</ul>
</li>
<li>主要步骤在这里,有时间再更新<blockquote>
<p><a href="https://ttt.tt/104/" target="_blank" rel="external">https://ttt.tt/104/</a></p>
</blockquote>
</li>
</ul>
<h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><ul>
<li><p>命令 如下，以下是将 SSH 端口改为 999 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i &apos;s/#Port 22/Port 999/g&apos; /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
</li>
<li><p>安装 fail2ban 封掉 暴力破解ip</p>
</li>
</ul>
<h4 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h4><ul>
<li><p>fail2ban 是 Linux 上的一个著名的入侵保护的开源框架，它会监控多个系统的日志文件，并根据检测到的任何可疑的行为自动触发不同的防御动作。将尝试爆破 ssh 密码的 IP 封停，默认10分钟。</p>
</li>
<li><p>详细配置安装方法在如下网址，这里使用默认配置即可。</p>
<blockquote>
<p><a href="https://linux.cn/article-5067-1.html" target="_blank" rel="external">https://linux.cn/article-5067-1.html</a></p>
</blockquote>
</li>
<li><p>安装 fail2ban<br>CentOS 需要提前 <a href="https://linux.cn/article-2324-1.html" target="_blank" rel="external"> 设置 EPEL 仓库 </a><br>以 root 用户登陆，非 root 用户需要 命令前 增加 sudo</p>
<p>安装命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//CentOS</div><div class="line">yum install fail2ban</div><div class="line">//Debian / ubuntu</div><div class="line">apt-get install fail2ban</div></pre></td></tr></table></figure>
</li>
<li><p>其他命令</p>
<ul>
<li><p>重启</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service fail2ban restart</div></pre></td></tr></table></figure>
</li>
<li><p>验证状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fail2ban-client ping</div></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Server replied: pong</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置开机自启动</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// CentOS/RHEL 6</div><div class="line">chkconfig fail2ban on</div><div class="line">// CentOS/RHEL 7</div><div class="line">systemctl enable fail2ban</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="禁用Linux多余端口"><a href="#禁用Linux多余端口" class="headerlink" title="禁用Linux多余端口"></a>禁用Linux多余端口</h2><ul>
<li>关闭多余端口是永远正确的选择！只留下常用端口 和 SSR端口</li>
<li><p>配置  iptables <strong>警告 iptables 配置不是一般的复杂，谨慎操作</strong></p>
</li>
<li><p>清空默认规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -F</div></pre></td></tr></table></figure>
</li>
<li><p>允许22端口，给暴力破解留点空间 //doge</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>允许53端口 udp ，一般用做DNS服务器，如果你不需要则忽略此条</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A OUTPUT -p udp --dport 53 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --sport 53 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>允许本机访问本机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</div><div class="line">iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p><strong>允许真正 SSH 端口</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp -s 0/0 --dport 999 -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport 99 -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>允许 80 443 端口，http 和 https</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp -s 0/0 --dport 80 -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp -s 0/0 --dport 443 -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>允许 SSR端口 以888 xxx 为例 你有几个端口，就添加几个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp -s 0/0 --dport 888 -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport 888 -m state --state ESTABLISHED -j ACCEPT</div><div class="line"></div><div class="line">iptables -A INPUT -p tcp -s 0/0 --dport xxx -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport xxx -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>保存配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables-save &gt; /etc/sysconfig/iptables</div></pre></td></tr></table></figure>
</li>
<li><p>重载 iptables</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -L</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装-CSF-防火墙"><a href="#安装-CSF-防火墙" class="headerlink" title="安装 CSF 防火墙"></a>安装 CSF 防火墙</h2><ul>
<li>命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rm -fv csf.tgz</div><div class="line">wget http://download.configserver.com/csf.tgz</div><div class="line">tar -xzf csf.tgz</div><div class="line">cd csf</div><div class="line">sh install.sh</div><div class="line">//使用下边的命令来验证csf正确安装并已经运行</div><div class="line">perl /usr/local/csf/bin/csftest.pl</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
    
    </summary>
    
      <category term="科学上网" scheme="http://yoursite.com/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—仿绿色守护嗜睡模式通知</title>
    <link href="http://yoursite.com/2017/03/07/Android%E7%AC%94%E8%AE%B0%E2%80%94%E4%BB%BF%E7%BB%BF%E8%89%B2%E5%AE%88%E6%8A%A4%E5%97%9C%E7%9D%A1%E6%A8%A1%E5%BC%8F%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2017/03/07/Android笔记—仿绿色守护嗜睡模式通知/</id>
    <published>2017-03-07T04:00:00.000Z</published>
    <updated>2017-03-15T01:51:24.740Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
<li><a href="https://developer.android.com/training/notify-user/index.html" target="_blank" rel="external">Android  Training Notifying the User</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html#CreateNotification" target="_blank" rel="external">Android API 通知</a></li>
<li><a href="https://www.oschina.net/question/234345_40111" target="_blank" rel="external">【Android】状态栏通知Notification、NotificationManager详解</a></li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>OneTapDoze遇到的第一个难题，顺带记录Android 通知相关内容</li>
</ul>
<hr>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><ul>
<li><p>绿色守护进入doze模式后，会在通知栏创建一个计时通知 如下图<br><img src="http://cdn3.snapgram.co/imgs/2017/03/07/Screenshot_20170307-231118.png" alt="Screenshot_20170307-231118.png"></p>
</li>
<li><p>退出doze模式后，会指示进入doze和退出doze的时间段。<br><img src="http://cdn4.snapgram.co/images/2017/03/07/Screenshot_20170307-231132.png" alt="Screenshot_20170307-231132.png"></p>
</li>
<li><p>我们要仿照的样式就是这样，进入退出doze，对应创建通知的代码都在doze模式改变的Broadcast中。</p>
</li>
</ul>
<h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><h3 id="创建通知"><a href="#创建通知" class="headerlink" title="创建通知"></a>创建通知</h3><ul>
<li>行文前：<br>Android每次版本几乎都会有通知API的改动，不同版本之间通知兼容性很是问题，为此我们使用support_v7 库中的NotificationCompat.Builder代替Notification.Builder二者使用方式相同</li>
</ul>
<hr>
<ul>
<li><p>涉及到的两个类</p>
<ul>
<li>NotificationManager</li>
<li>Notification (support库中对应NotificationCompat)</li>
</ul>
</li>
<li><p>NotificationManager</p>
<ul>
<li>状态栏通知的管理类，负责发通知、清除通知等 </li>
<li>NotificationManager 是一个系统Service，必须通过 getSystemService()方法来获取</li>
</ul>
</li>
<li><p>Notification</p>
<ul>
<li>具体的状态栏通知对象，可以设置icon、文字、提示声音、振动等参数</li>
<li>一个Builder对象至少包含三个方面<ul>
<li>一个小图标，通过setSmallIcon()方法设置。</li>
<li>通知标题，通过setContentTitle()方法设置。</li>
<li>详细文本，通过setContentText()方法设置。</li>
</ul>
</li>
</ul>
</li>
<li><p>简单示例</p>
<ul>
<li><p>创建通知构建器<br> 代码</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">           .setContentTitle(<span class="string">"这是通知标题"</span>)</div><div class="line">           .setContentText(<span class="string">"这是通知内容"</span>)</div><div class="line">           <span class="comment">//这里使用的是应用图标，一般没人这么干，就是为了方便</span></div><div class="line">           .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">           .build();</div></pre></td></tr></table></figure>
<ul>
<li><p>发布通知</p>
<ul>
<li>获得NotificationManager的实例</li>
<li>使用notify()方法发布通知。在调用notify()方法  指定通知的ID，(ID用于通知更新)  加载Notification实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> mNotificationId = <span class="number">001</span>;</div><div class="line"></div><div class="line">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">manager.notify(mNotificationId, notification);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>效果如下</p>
<ul>
<li>android 7.0 / 6.0 /4.0 通过</li>
<li><img src="http://cdn1.snapgram.co/imgs/2017/02/02/ScreenShot_20170202173430.png" alt="ScreenShot_20170202173430.png"></li>
</ul>
</li>
</ul>
<h3 id="更新通知"><a href="#更新通知" class="headerlink" title="更新通知"></a>更新通知</h3><ul>
<li><p>可以创建一个全新的NotificationCompat对象，也可以在原NotificationCompat对象基础上修改，最后只要 .notify 方法中对应同一个 mNotificationId ，系统就会自动更新已有通知，代码不在累赘。</p>
</li>
<li><p>基础部分到此，足矣</p>
</li>
</ul>
<h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><ul>
<li>实现时间段的显示，肯定会保存系统进入doze 退出doze对应的时间点。再计算出中间经历的时间。</li>
</ul>
<h3 id="提取系统时间"><a href="#提取系统时间" class="headerlink" title="提取系统时间"></a>提取系统时间</h3><ul>
<li><p>java.util.Date<br>这里用到了java中的 时间类型 java.util.Date<br>java.util.Date 是java中常用时间类型，可以被SimpleDateFormat格式化format() 指定输出的时间格式<br>比如我们需要 小时：分：秒<br><code>SimpleDateFormat scanf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);</code><br><code>scanf.format(java.util.Date)</code> 即可。</p>
</li>
<li><p>提前当前系统时间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java.util.Date time_after = <span class="keyword">null</span>;</div><div class="line">time_after = <span class="keyword">new</span> java.util.Date(System.currentTimeMillis());</div></pre></td></tr></table></figure>
</li>
<li><p>计算时间差<br>理论上是两个时间相减再格式化输出即可，可惜没成，原因还没找到。于是土办法：</p>
<ul>
<li>调用 .getTime() 方法，将 java.util.Date 转化为毫秒计时(long)</li>
<li>取两者差值</li>
<li>转化为 时间长短 字符串返回，</li>
<li>代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> size = (time_after.getTime() - time_befor.getTime());</div><div class="line"> string = scanf.format(time_befor) + <span class="string">"-"</span> + scanf.format(time_after) + <span class="string">"="</span>+ trform(size);</div><div class="line">      </div><div class="line"> <span class="function">String <span class="title">trform</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</div><div class="line"> <span class="keyword">long</span> day, hour, min, secone;</div><div class="line"> </div><div class="line"> day = size / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);          <span class="comment">//以天数为单位取整</span></div><div class="line"> hour = (size / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) - day * <span class="number">24</span>);             <span class="comment">//以小时为单位取整</span></div><div class="line"> min = ((size / (<span class="number">60</span> * <span class="number">1000</span>)) - day * <span class="number">24</span> * <span class="number">60</span> - hour * <span class="number">60</span>);    <span class="comment">//以分钟为单位取整</span></div><div class="line"> secone = (size / <span class="number">1000</span> - day * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> - hour * <span class="number">60</span> * <span class="number">60</span> - min * <span class="number">60</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (day != <span class="number">0</span>) &#123;</div><div class="line">   <span class="keyword">return</span> day + <span class="string">"d"</span> + hour + <span class="string">"h"</span> + min + <span class="string">"m"</span> + secone + <span class="string">"s"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hour != <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> hour + <span class="string">"h"</span> + min + <span class="string">"m"</span> + secone + <span class="string">"s"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (min != <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> min + <span class="string">"m"</span> + secone + <span class="string">"s"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> secone + <span class="string">"s"</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="通知扩展布局"><a href="#通知扩展布局" class="headerlink" title="通知扩展布局"></a>通知扩展布局</h3><ul>
<li><p>在如下图片中，可以发现，通知在发出后，只默认显示最近一次的时间记录，其他时间记录可以在此条通知上下滑查看。明显与基础部分不同。<br><img src="http://cdn4.snapgram.co/images/2017/03/07/Screenshot_20170307-231132.png" alt="Screenshot_20170307-231132.png"></p>
</li>
<li><p>此处应用了 Builder.setStyle() 拓展布局，顾名思义，这是用于拓展通知显示范围</p>
</li>
</ul>
<hr>
<h4 id="使用扩展布局"><a href="#使用扩展布局" class="headerlink" title="使用扩展布局"></a>使用扩展布局</h4><ul>
<li>使用拓展布局<ul>
<li>构建一个 inboxStyle 对象</li>
<li>.addLine方法  添加 String  inboxStyle 行</li>
<li>使用 Builder.setStyle( inboxStyle )加载到通知</li>
<li>等待通知发布即可。</li>
</ul>
</li>
<li><p>简单例程如下 </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建 inboxStyle</span></div><div class="line"> NotificationCompat.InboxStyle inboxStyle = <span class="keyword">new</span> NotificationCompat.InboxStyle();</div><div class="line"> <span class="comment">//添加 String 行 ，前提是 我已经创建了一个 String</span></div><div class="line"> inboxStyle.addLine(string);</div><div class="line"> <span class="comment">// 在notification 设置    inboxStyle 在一堆 build 里面</span></div><div class="line"> .setStyle(inboxStyle)</div></pre></td></tr></table></figure>
</li>
<li><p>清除原有内容，发布新的 inboxStyle 只需要 <code>inboxStyle = new NotificationCompat.InboxStyle();</code></p>
</li>
</ul>
<h3 id="Doze模式改变广播"><a href="#Doze模式改变广播" class="headerlink" title="Doze模式改变广播"></a>Doze模式改变广播</h3><h2 id="对应-ACTION-DEVICE-IDLE-MODE-CHANGED"><a href="#对应-ACTION-DEVICE-IDLE-MODE-CHANGED" class="headerlink" title="* 对应 ACTION_DEVICE_IDLE_MODE_CHANGED"></a>* 对应 <code>ACTION_DEVICE_IDLE_MODE_CHANGED</code></h2><ul>
<li>坑：只能动态注册，静态注册无效，具体代码中<code>powermanger.ACTION_DEVICE_IDLE_MODE_CHANGED</code> 需要实例化 PowerManger ，而 PowerManger 又是与 Activity绑定，所以只有应用保持后台存活时才会进入广播。</li>
<li>例程如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化 PowerManager</span></div><div class="line">PowerManager powermanger = (PowerManager) getApplicationContext().getSystemService(Context.POWER_SERVICE);</div><div class="line"><span class="comment">//动态注册广播</span></div><div class="line">intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(powermanger.ACTION_DEVICE_IDLE_MODE_CHANGED);</div><div class="line"><span class="comment">//idlemodechage 是 BroadcastReceiver </span></div><div class="line">idlemodechage = <span class="keyword">new</span> IdleModeChange();</div><div class="line">registerReceiver(idlemodechage, intentFilter);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/notify-user/index.html&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—ContentResolver</title>
    <link href="http://yoursite.com/2017/01/19/Android%E7%AC%94%E8%AE%B0-ContentResolver/"/>
    <id>http://yoursite.com/2017/01/19/Android笔记-ContentResolver/</id>
    <published>2017-01-19T04:00:00.000Z</published>
    <updated>2017-01-28T13:24:28.091Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
<li><a href="http://www.jianshu.com/p/57798618bd90" target="_blank" rel="external">android6.0运行时权限详解</a></li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>内容提供器是安全的应用间共享数据途径，在正式进入之前需要了解一下 Android 自6.0以来权限的变化</li>
</ul>
<hr>
<h2 id="Android-权限详解"><a href="#Android-权限详解" class="headerlink" title="Android 权限详解"></a>Android 权限详解</h2><hr>
<p>资料来源：</p>
<ul>
<li><a href="http://www.jianshu.com/p/57798618bd90" target="_blank" rel="external">android6.0运行时权限详解</a></li>
<li><a href="https://developer.android.com/guide/topics/security/permissions.html" target="_blank" rel="external">Develop-API Guides-系统权限</a></li>
<li>第一行代码(第二版)</li>
</ul>
<hr>
<h3 id="Android权限介绍"><a href="#Android权限介绍" class="headerlink" title="Android权限介绍"></a>Android权限介绍</h3><ul>
<li><p>Android 是一个权限分隔的操作系统<br>每个应用系统标识（Linux 用户 ID 和组 ID）不同。系统各部分标识亦不相同。Linux 据此将不同的应用以及应用与系统分隔开来。<br>更详细的安全功能通过“权限”提供，权限 会限制特定进程可以执行的具体操作，并且根据 URI 权限授权临时访问特定的数据段</p>
</li>
<li><p>权限声明<br>最常见的权限声明在 AndroidManifest.xml 文件中一个或多个uses-permission 标记, </p>
<ul>
<li>例如 声明短信权限 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">package</span>=<span class="string">"com.android.app.myapp"</span> &gt;</div><div class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_SMS"</span> /&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>android 6.0 权限机制<br>android 6.0之前 权限及在安装的时候，根据权限声明产生一个权限列表，用户只有在同意之后才能完成app的安装。<br>android 6.0 以后 引入了  运行时权限 功能，应用所需权限不再一次性在安装时申请，而是在运行时需要用到那种权限向用户申请，同时用户也可以随时取消该授权</p>
</li>
<li><p>权限分类</p>
<ul>
<li>Normal Permissions(普通权限)<br>不涉及用户隐私，不需要用户进行授权的，例如 手机震动、访问网络等</li>
<li>Dangerous Permission(危险权限)<br>涉及到用户隐私的，需要用户进行授权，例如 读取sdcard、访问通讯录等<br><a href="https://developer.android.com/guide/topics/security/permissions.html" target="_blank" rel="external">危险权限组</a>如表1</li>
</ul>
</li>
</ul>
<h3 id="应用运行时申请权限（适用于-Android6-0-及以上版本）"><a href="#应用运行时申请权限（适用于-Android6-0-及以上版本）" class="headerlink" title="应用运行时申请权限（适用于 Android6.0 及以上版本）"></a>应用运行时申请权限（适用于 Android6.0 及以上版本）</h3><ul>
<li>通过一个简单的实例来说明过程<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4></li>
<li><p>拨打电话 CALL<em>PHONE  </em>权限为例 </p>
<ul>
<li>权限声明<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CALL_PHONE"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>拨打10010</p>
<ul>
<li>代码如下 构建一个隐式intent 启动拨打电话<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</div><div class="line">intent.setData(Uri.parse(<span class="string">"tel:10010"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>在主界面上添加一个Button 在其onClick方法中拨打电话，运行程序!</li>
</ul>
<hr>
<ul>
<li>在An’d’roid 6.0 以下版本中 电话都可以正常拨出。Android 6.0 以上版本中 则可能会应用崩溃/无反应，查看logcat的打印日志可以看到 “Permission Denial”权限被禁止的信息，接下来尝试使用 运行时申请权限</li>
</ul>
<hr>
<ul>
<li>检查是否已获得授权<br>int  checkSelfPermission(Context context, String permission)方法 <ul>
<li>Context context context<br>String permission  权限具体名称<br>打电话对应 Manifest.permission.CALL<em>PHONE   </em></li>
<li>方法返回  PERMISSION_GRANTED  /   PERMISSION_DENIED</li>
<li>例程<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(ContextCompat.checkSelfPermission</div><div class="line">(MainActivity.<span class="keyword">this</span>,Manifest.permission.CALL_PHONE) </div><div class="line">!=PackageManager.PERMISSION_GRANTED)</div><div class="line">&#123;</div><div class="line">         ;</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">         ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>申请权限<br>void ActivityCompat.requestPermissions (Activity activity, String[] permissions, int requestCode)方法</p>
<ul>
<li><p>Activity activity  Activity实例<br>String[] permissions  请求权限名<br>int requestCode 请求码，大于0即可，对应在onRequestPermissionsResult 回掉方法中的requestCode</p>
</li>
<li><p>例程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,</div><div class="line"><span class="keyword">new</span> String[]&#123;Manifest.permission.CALL_PHONE&#125;,<span class="number">1</span> );</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>授权后回掉<br>无论用户是否授权都会进入回掉方法，需要重写该方法。<br>void onRequestPermissionsResult (int requestCode, String[] permissions, int[] grantResults)方法</p>
<ul>
<li><p>int requestCode    在 requestPermissions 中传入的请求码<br>String[] permissions   请求的权限，不为空<br>int[] grantResults        授权结果 只有 PERMISSION_GRANTED  / PERMISSION_DENIED 两个值</p>
</li>
<li><p>例程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">    	<span class="comment">//请求码 1</span></div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="comment">//授权结果(int) 的 长度是否大于0  与上 授权结果是否等于  PackageManager.PERMISSION_GRANTED </span></div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">//授权通过执行</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//授权没有通过  </span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>当用户拒绝后再次询问<br>  boolean ActivityCompat.shouldShowRequestPermissionRationale(Activity activity, String permission)             （真心太长了）</p>
<ul>
<li>Activity activity  Activity实例<br>String permission   权限名称<br>应用第一次需要授权时,用户授权，该方法返回false。当用户拒绝授权,下次需要该权限时,该方法会返回true</li>
<li>例程<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale</div><div class="line">(PermissionActivity.<span class="keyword">this</span>,Manifest.permission.READ_CONTACTS))</div><div class="line">&#123;</div><div class="line"><span class="comment">//第二次询问用户是否授权</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//用户依旧拒绝后操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>例程源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Button</span><span class="params">(View view)</span></span>&#123;</div><div class="line">      <span class="keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>,Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">          ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CALL_PHONE&#125;,<span class="number">1</span> );</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">          call();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</div><div class="line">          intent.setData(Uri.parse(<span class="string">"tel:10010"</span>));</div><div class="line">          startActivity(intent);</div><div class="line">      &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">      <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">              <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                  call();</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  Toast.makeText(<span class="keyword">this</span>, <span class="string">"You denied the permission"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">default</span>:</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">     <span class="attr">android:onClick</span>=<span class="string">"Button"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"Hello World!"</span> /&gt;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/57798618bd90&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android6.0运行时
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—数据保存</title>
    <link href="http://yoursite.com/2017/01/14/Android%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E4%BF%9D%E5%AD%98/"/>
    <id>http://yoursite.com/2017/01/14/Android笔记-数据保存/</id>
    <published>2017-01-14T04:00:00.000Z</published>
    <updated>2017-01-14T13:30:28.259Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<hr>
<h2 id="Android-中的主要数据存储"><a href="#Android-中的主要数据存储" class="headerlink" title="Android 中的主要数据存储"></a>Android 中的主要数据存储</h2><ul>
<li><p>有三种</p>
</li>
<li><p>保存键值集<br> 要保存的相对较小键值集合，使用 SharedPreferences</p>
</li>
<li><p>保存文件<br>使用 Android 文件系统通过 File API 读取和写入文件，适合按开始到结束的顺序不跳过地读取或写入大量数据。 例如，图片文件或通过网络交换的任何内容</p>
</li>
<li><p>在 SQL 数据库中保存数据<br>Android内建的SQLite 数据库存储重复或结构化数据</p>
</li>
</ul>
<hr>
<ul>
<li>PS：这里如果没有学过 SQL 数据库使用，推荐LitePal</li>
<li>Android开源数据库<a href="https://github.com/LitePalFramework/LitePal#latest-downloads/" target="_blank" rel="external">LitePal</a>  ：郭霖(第一行代码作者)</li>
<li>详细介绍在这里<a href="http://www.jianshu.com/p/557682e0a9f0" target="_blank" rel="external">（懒人必备）Android开源数据库LitePal</a></li>
</ul>
<hr>
<h3 id="保存键值集"><a href="#保存键值集" class="headerlink" title="保存键值集"></a>保存键值集</h3><ul>
<li>想要保存的相对较小键值集合</li>
<li><p>调用SharedPreferences</p>
</li>
<li><p>首先：获取SharedPreferences的句柄<br>用户可以创建一个共享参数文件或访问一个已经存在的共享参数文件。<br>具体途径有三条</p>
<ul>
<li><p>getSharedPreferences (String name, int mode)</p>
<ul>
<li>第一个参数：SharedPreferences的名称，第二个：参数指定操作模式</li>
<li>需要创建/读取 多个共享参数文件时使用，每个文件都拥有一个标识符，可以通过这个标识符通过该方法的第一个参数获得共享参数对象。可以通过APP中的任意Context对象调用它。</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定SharedPreferences名称为data  模式为MODE_PRIVATE：只有当前程序才有权限读取/修改</span></div><div class="line">SharedPreferences sharedPref = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>getPreferences (int mode)</p>
<ul>
<li>参数：指定操作模式</li>
<li>只创建 Activity 的一个SharedPreferences。在Activity 中使用。 方法会检索属于该 Activity 的默认共享首选项文件，无需提供名称</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//模式：MODE_PRIVATE：只有当前程序才有权限读取/修改</span></div><div class="line">SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>getDefaultSharedPreferences(context)</p>
<ul>
<li>参数：context</li>
<li>自动以档期应用程序包名作为前缀命名SharedPreferences文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>写入数据到共享参数中<ul>
<li>SharedPreferences 调用 edit() 创建一个 SharedPreferences.Editor<br>使用诸如 putInt() 和 putString() 方法写入的键和值<br>最后调用commit() 以保存更改<br>也可调用apply() 保存更改</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>commit() 与 apply() 相同/区别</li>
<li>相同<ul>
<li>都是提交preference修改数据</li>
</ul>
</li>
<li>区别<ul>
<li>apply没有返回值  commit返回boolean表明修改是否提交成功</li>
<li>apply是将操作提交到内存，而后异步真正提交到文件<br> commit是同步的提交到文件<br> 多个commit同时提交，互相等待，效率较低<br> apply直接覆盖，效率较高<ul>
<li>apply没有任何错误提示，只是提交的动作</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建 .edit()</span></div><div class="line">SharedPreferences.Editor editor = sharedPref.edit();</div><div class="line"><span class="comment">//写入字符串。key-值 TextView</span></div><div class="line">editor.putString(<span class="string">"TextView"</span>,<span class="string">"hello"</span>);</div><div class="line"><span class="comment">//保存更改</span></div><div class="line">editor.commit();</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>从共享参数中读取数据<ul>
<li>获取SharedPreferences的句柄<br>方式同上</li>
<li>调用比如getInt()或getString()方法，然后传入键值，如果键不存在，则会返回一个默认值</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取SharedPreferences的句柄</span></div><div class="line">SharedPreferences sharedPreferences = getSharedPreferences(<span class="string">"data"</span>,MODE_PRIVATE);</div><div class="line"><span class="comment">//读取键值对应数据</span></div><div class="line">String text = sharedPreferences.getString(<span class="string">"TextView"</span>,<span class="string">""</span>);</div><div class="line"><span class="comment">//打印到log中 验证</span></div><div class="line">Log.d(<span class="string">"data"</span>,text);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h3><ul>
<li>Android 设备有两个文件存储区域： 内部存储 和 外部存储<br>Android 设备早期内置的非易失性内存（内部存储），以及移动存储介质 微型 SD 卡等（外部存储）<br>任何Android设备始终有两个存储空间，并且无论外部存储设备是否可移动，API 的行为均一致</li>
</ul>
<ul>
<li>Android的文件存储是以java流为基础，并优化了一些操作。java流不属于本文范围。</li>
<li>涉及java流部分参考<a href="http://androidtoast.iteye.com/blog/1172673" target="_blank" rel="external">Android文件IO详解</a></li>
</ul>
<h4 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h4><h4 id="保存到内部存储"><a href="#保存到内部存储" class="headerlink" title="保存到内部存储"></a>保存到内部存储</h4><ul>
<li>某一应用对其内部存储 始终具有 进行读写的权限，而无需声明任何权限，在 Android N之前，内部文件可以通过放宽权限让其他应用访问。<strong>但是极不推荐以这种方式共享文件</strong></li>
</ul>
<ul>
<li><p>简单实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String inputText)</span></span>&#123;</div><div class="line">      <span class="comment">//新建一个FileOutputStream对象(字节流)</span></div><div class="line">      FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">      <span class="comment">//新建一个BufferedWriter (字符流)</span></div><div class="line">      BufferedWriter writer = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">          <span class="comment">//out 实例化</span></div><div class="line">          out = openFileOutput(<span class="string">"data"</span>,Context.MODE_PRIVATE);</div><div class="line">          <span class="comment">//OutputStreamWrit  字节流转换为字符流</span></div><div class="line">          <span class="comment">//字符流绑定BufferedWriter(缓冲区)</span></div><div class="line">          writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</div><div class="line">          <span class="comment">//写入到文件</span></div><div class="line">          writer.write(inputText);</div><div class="line">      &#125;<span class="keyword">catch</span> (IOException e )&#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="keyword">try</span>&#123;</div><div class="line">              <span class="comment">//如果写入成功</span></div><div class="line">              <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</div><div class="line">              	<span class="comment">//关闭流</span></div><div class="line">                  writer.close();</div><div class="line">              &#125;</div><div class="line">          &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>FileOutputStream：</p>
<ul>
<li>继承自 OutputStream 用于文件处理的节点流</li>
<li>用于写入原始字节流到文件</li>
</ul>
</li>
<li><p>FileOutputStream openFileOutput (String name, int mode)</p>
<ul>
<li>返回FileOutputStream对象</li>
<li>第一个参数是文件名</li>
<li>第二个参数是操作模式，有4种取值<ul>
<li>MODE<em>PRIVATE(默认)</em>当同一文件名存在时覆盖原文件</li>
<li>MODE<em>APPEND  </em>当同名文件存在时，在原文件末尾追加</li>
<li>其余两种均在android4.2及以上版本中废弃</li>
</ul>
</li>
</ul>
</li>
<li><p>OutputStreamWrit</p>
<ul>
<li>继承自 Writer </li>
<li>将字节流转换为字符流</li>
</ul>
</li>
<li><p>BufferedWriter </p>
<ul>
<li>继承自Writer </li>
<li>绑定字符输出流，提高具体的流对象的效率</li>
<li>.flush()方法 对缓冲区进行刷新，让数据到目的地</li>
<li>.close();方法 关闭缓冲区，即关闭绑定的流</li>
</ul>
</li>
</ul>
<h5 id="从内部存储读取文件"><a href="#从内部存储读取文件" class="headerlink" title="从内部存储读取文件"></a>从内部存储读取文件</h5><ul>
<li><p>简单实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//新建FileInputStream对象</span></div><div class="line">     FileInputStream in = <span class="keyword">null</span>;</div><div class="line">     <span class="comment">//新建 BufferedReader对象</span></div><div class="line">     BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">     <span class="comment">//新建一个StringBuilder 空</span></div><div class="line">      content = <span class="keyword">new</span> StringBuilder();</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">     	<span class="comment">//FileInputStream对象实例化</span></div><div class="line">         in = openFileInput(<span class="string">"data"</span>);</div><div class="line">         <span class="comment">//字节流转换为字符流</span></div><div class="line">         <span class="comment">//缓冲流绑定字符流</span></div><div class="line">         reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">         <span class="comment">//空 String</span></div><div class="line">         String line = <span class="string">""</span>;</div><div class="line">         <span class="comment">//读取文件内容，并判断是否读取完成</span></div><div class="line">         <span class="keyword">while</span>((line = reader.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">         	<span class="comment">//读取内容添加到 StringBuilder 对象中   </span></div><div class="line">             content.append(line);</div><div class="line">         &#125;</div><div class="line">     &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">finally</span> &#123;</div><div class="line">         <span class="keyword">if</span>(reader != <span class="keyword">null</span>)&#123;</div><div class="line">             <span class="keyword">try</span>&#123;</div><div class="line">             	<span class="comment">//关闭流</span></div><div class="line">                 reader.close();</div><div class="line">             &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">                 e.printStackTrace();</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//将读取结果 由StringBuilder转换为String 并返回</span></div><div class="line">     <span class="keyword">return</span> content.toString();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>FileInputStream</p>
<ul>
<li>继承自 InputStream，用于文件处理的节点流</li>
<li>从文件中读取</li>
</ul>
</li>
<li><p>FileInputStream openFileInput(String filename)</p>
<ul>
<li>返回FileInputStream对象</li>
<li>参数为 读取的文件名</li>
</ul>
</li>
<li><p>InputStreamRead</p>
<ul>
<li>将字节流转换为字符流</li>
</ul>
</li>
<li><p>BufferedReader</p>
<ul>
<li>缓冲流</li>
</ul>
</li>
</ul>
<h4 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h4><ul>
<li>占坑</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Android-中的主要数据存储&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>2016总结</title>
    <link href="http://yoursite.com/2016/12/31/2016%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/12/31/2016总结/</id>
    <published>2016-12-31T04:00:11.000Z</published>
    <updated>2016-12-31T14:50:12.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><ul>
<li>找到了兴趣-Android开始正式学习。</li>
<li>搭建了自己的blog，虽然周围人没人关注，有一篇日子的阅读量过了1万，还是很惊喜的</li>
<li>嵌入式工作没用找到满意的，只能说等春招 Andoid的实习，这段时间努力提高自己，</li>
<li>放弃了考研</li>
<li>心情走过了类似抑郁的经历，对体制种种各有看法，是对是错，让时间见证</li>
</ul>
<hr>
<h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><ul>
<li>希望有自己的收入，经济相对自由一点</li>
<li>谈一段恋爱，遇到合适的女孩吧</li>
<li>Android的路上，顺利一点吧</li>
<li>不给自己设定限制，走一步再走一步</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2016&quot;&gt;&lt;a href=&quot;#2016&quot; class=&quot;headerlink&quot; title=&quot;2016&quot;&gt;&lt;/a&gt;2016&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;找到了兴趣-Android开始正式学习。&lt;/li&gt;
&lt;li&gt;搭建了自己的blog，虽然周围人没人关注，有一篇日子
    
    </summary>
    
      <category term="随" scheme="http://yoursite.com/categories/%E9%9A%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Studio优化编译速度</title>
    <link href="http://yoursite.com/2016/12/25/Android%20Studio%E4%BC%98%E5%8C%96%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6/"/>
    <id>http://yoursite.com/2016/12/25/Android Studio优化编译速度/</id>
    <published>2016-12-25T04:00:00.000Z</published>
    <updated>2016-12-25T14:51:15.768Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li><a href="http://www.jianshu.com/p/1c878c10a6bb" target="_blank" rel="external">http://www.jianshu.com/p/1c878c10a6bb</a></li>
<li><a href="http://www.jianshu.com/p/9b8ef61b7cdb" target="_blank" rel="external">http://www.jianshu.com/p/9b8ef61b7cdb</a></li>
<li><a href="http://www.jianshu.com/p/64d9a52aebbf" target="_blank" rel="external">http://www.jianshu.com/p/64d9a52aebbf</a></li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3</li>
</ul>
<p>导语</p>
<ul>
<li>ssd盘容量不够了，重装系统，随便重新安装了Android Studio 记录一边优化过程</li>
</ul>
<hr>
<h2 id="最重要的-有一个良好的梯子-全局翻墙"><a href="#最重要的-有一个良好的梯子-全局翻墙" class="headerlink" title="最重要的 有一个良好的梯子+全局翻墙"></a>最重要的 有一个良好的梯子+全局翻墙</h2><ul>
<li>大部分Android Studio安装的问题,就基本不会出现</li>
</ul>
<h4 id="开启gradle单独的守护进程"><a href="#开启gradle单独的守护进程" class="headerlink" title="开启gradle单独的守护进程"></a>开启gradle单独的守护进程</h4><ul>
<li><p>在C:\Users.gradle目录(user目录即当前用户不同电脑一般不同)下新建 gradle.properties文件<br>复制下面的代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">org.gradle.daemon=true  </div><div class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=800m  </div><div class="line">-XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</div><div class="line">org.gradle.parallel=true  </div><div class="line">org.gradle.configureondemand=true</div></pre></td></tr></table></figure>
<p>应该是增大了gradle 运行的 java 虚拟机的大小，我的电脑是8g内存，这个配置效果最好</p>
</li>
</ul>
<h4 id="扩大Android-Studio-运行内存"><a href="#扩大Android-Studio-运行内存" class="headerlink" title="扩大Android Studio 运行内存"></a>扩大Android Studio 运行内存</h4><ul>
<li><p>找到Android Studio安装目录下的bin文件夹<br>找到studio64.exe.vmoptions和studio.exe.vmoptions文件(64位)<br>studio.exe.vmoptions和studio.exe.vmoptions文件(32位)</p>
</li>
<li><p>分别编辑文件,改动3个地方如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-Xms1024m</div><div class="line">-Xmx2048m</div><div class="line">-XX:MaxPermSize=800m</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Android-Studio-设置"><a href="#Android-Studio-设置" class="headerlink" title="Android Studio 设置"></a>Android Studio 设置</h4><ul>
<li><p>Command-line Option不填<br><img src="http://cdn2.snapgram.co/imgs/2016/12/25/ScreenShot_20161225224242.png" alt="ScreenShot_20161225224242.png"></p>
</li>
<li><p>gradle 离线模式<br>勾选Office Work，我这里测试是速度基本不变，但是网上有人测试是效果相差很多，原因不明，可能是网络一直全局翻墙的关系<br><img src="http://cdn1.snapgram.co/imgs/2016/12/25/ScreenShot_20161225224455.png" alt="ScreenShot_20161225224455.png"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/1c878c10a6bb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/1c878c10
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—Broadcast广播</title>
    <link href="http://yoursite.com/2016/12/23/Android%E7%AC%94%E8%AE%B0-Broadcast%E5%B9%BF%E6%92%AD/"/>
    <id>http://yoursite.com/2016/12/23/Android笔记-Broadcast广播/</id>
    <published>2016-12-23T04:00:00.000Z</published>
    <updated>2016-12-23T14:53:08.678Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3</li>
</ul>
<hr>
<h2 id="BroadcastReceiver基础"><a href="#BroadcastReceiver基础" class="headerlink" title="BroadcastReceiver基础"></a>BroadcastReceiver基础</h2><ul>
<li>首先祭出官方文档及<strong>中文翻译</strong><blockquote>
<p><a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html" target="_blank" rel="external">https://developer.android.com/reference/android/content/BroadcastReceiver.html</a><br><a href="http://www.jianshu.com/p/1b56172b0c77" target="_blank" rel="external">http://www.jianshu.com/p/1b56172b0c77</a></p>
</blockquote>
</li>
</ul>
<h3 id="BroadcastReceiver概述"><a href="#BroadcastReceiver概述" class="headerlink" title="BroadcastReceiver概述"></a>BroadcastReceiver概述</h3><ol>
<li><a href="http://www.cnblogs.com/qiuscut/articles/2212064.html" target="_blank" rel="external">@别路寻忆</a><br>Android中的四大组件是 Activity、Service、Broadcast和Content Provider。而Intent是一个对动作和行为的抽象描述，负责组件之间程序之间进行消息传递。那么Broadcast Receiver组件就提供了一种把Intent作为一个消息广播出去，由所有对其感兴趣的程序对其作出反应的机制。</li>
<li><p><a href="http://blog.csdn.net/zuolongsnail/article/details/6450156" target="_blank" rel="external">@zuolongsnail专栏</a></p>
<ul>
<li><p>广播接收器是一个专注于接收广播通知信息，并做出对应处理的组件。很多广播是源自于系统代码的──比如，通知时区改变、电池电量低、拍摄了一张照片或者用户改变了语言选项。应用程序也可以进行广播──比如说，通知其它应用程序一些数据下载完成并处于可用状态。</p>
</li>
<li><p>应用程序可以拥有任意数量的广播接收器以对所有它感兴趣的通知信息予以响应。所有的接收器均继承自BroadcastReceiver基类。</p>
</li>
<li><p>广播接收器没有用户界面。然而，它们可以启动一个activity来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力──闪动背灯、震动、播放声音等等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p>
</li>
</ul>
</li>
</ol>
<h3 id="广播分类"><a href="#广播分类" class="headerlink" title="广播分类"></a>广播分类</h3><ul>
<li>触发广播发生的事件分类有两种<ol>
<li>Android系统广播事件<br> 由android设备状态变化而触发的系统广播如：<br> Intent.ACTION_POWER_CONNECTED;<br> //插上外部电源时发出的广播<br> Intent.ACTION_SCREEN_ON;<br> //屏幕被打开之后的广播<br> ACTION_TIME_CHANGED<br>//系统时间改变而触发的广播</li>
<li>自定义的广播事件<br> 这个比较好理解了，比如qq当我们再另外一台手机上登陆时，手头的这个手机qq就会自动下线。腾讯的服务器通过后台服务启用了自定义广播来终结正在运行的Activity，详情之后会有例程，不再累赘。</li>
</ol>
</li>
<li><p>能够被接收的广播类型</p>
<ol>
<li><p>普通广播（Normal broadcasts）：<br> （由 Context.sendBroadcast发出）异步发出。所有广播接收器都可以在同一时间接收广播。广播接收者无法接收广播的处理结果或者阻断广播的传递。</p>
</li>
<li><p>有序广播（Ordered broadcasts）：<br> （由 Context.sendOrderedBroadcast发出）每次只发送给一个广播接收器。当每个广播接收器依次执行时，它可以向下一个广播接收器传播结果，或者阻断该广播，使得该广播不能被下一个广播接收器接收到。</p>
</li>
</ol>
<ul>
<li>通俗解释：<br>  普通广播就相当于小区/村委会的大喇叭，有事发生（触发广播）通知所有的人（广播接收器），全功率的大喊大叫确保所有人（广播接收器）都能听到。而有人（广播接收器）在睡觉被吵醒但是又没办法砸了那个大喇叭，只能继续听着（无法接收广播的处理结果或者阻断广播的传递）。<br>  有序广播 就相当于间谍机关的绝密消息传递。绝密到手（触发广播）间谍秘密汇总给上线A（广播接收器A）。本来 上线（广播接收器A）应该  听取完毕重新整理情向首长B（广播接收器B）报告（向广播接收器B传播 广播接收器A修改的结果）,但是A被收买，将情报隐匿了，没有向首长B汇报（广播接收器A阻断该广播，使得该广播不能被下一个广播接收器B接收到）。（PS结局首长B错误带人炸了村委会，该睡觉的人终于可以安生睡觉了！）</li>
</ul>
</li>
<li><p>广播事件注册有两种</p>
<ol>
<li>静态注册，就是在AndroidManifest.xml文件中定义，注册的广播接收器必须要继承BroadcastReceiver.</li>
<li>动态注册，是在程序中使用Context.registerReceiver注册，注册的广播接收器相当于一个匿名类。两种方式都需要IntentFIlter。</li>
</ol>
<ul>
<li>例程见下节。</li>
</ul>
</li>
</ul>
<h2 id="动态注册（在代码中注册）"><a href="#动态注册（在代码中注册）" class="headerlink" title="动态注册（在代码中注册）"></a>动态注册（在代码中注册）</h2><ul>
<li><p>在代码中通过registerReceiver()注册。app关闭后,该接收器也会随之销毁。</p>
</li>
<li><p>首先定义一个内部子类NetworkChangeReceiver继承自 BroadcastReceiver</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"></div><div class="line"><span class="comment">//重写onReceive，接收到广播后提示消息</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line"> 	Toast.makeText(context, <span class="string">"network is available网络已变化"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在onCreate()方法中创建IntentFilter实例和NetworkChangeReceiver实例。并在IntentFilter实例中添加网络变化时系统广播对应值。随后传入registerReceiver()中注册。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line"> <span class="comment">//创建IntentFilter实例</span></div><div class="line">    intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">    <span class="comment">//添加对应系统广播</span></div><div class="line">    intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</div><div class="line">    <span class="comment">//添加NetworkChangeReceiver实例</span></div><div class="line">    networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</div><div class="line">    <span class="comment">//动态注册</span></div><div class="line">    registerReceiver(networkChangeReceiver, intentFilter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态注册的广播接收器最后要取消注册。在onDestroy()方法中调用unregisterReceiver()销毁动态注册的广播接收器。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    unregisterReceiver(networkChangeReceiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>最后要在AndroidMainfest.xml中声明查询系统网络状态的权限。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行效果如如所示（模拟器）<br>  <img src="http://ww2.sinaimg.cn/large/6153fc0cjw1f7j04rqb85j20u01hcjv9.jpg" alt=""></p>
</li>
</ul>
<h2 id="静态注册（xml中注册）"><a href="#静态注册（xml中注册）" class="headerlink" title="静态注册（xml中注册）"></a>静态注册（xml中注册）</h2><ul>
<li>直接在Manifest.xml文件中配置广播接收者</li>
<li>例程为了方便同样以<code>android.net.conn.CONNECTIVITY_CHANGE</code>为例，与动态注册相同。<h3 id="不使用内部子类（第一行代码）"><a href="#不使用内部子类（第一行代码）" class="headerlink" title="不使用内部子类（第一行代码）"></a>不使用内部子类（第一行代码）</h3></li>
<li><p>新建名称为BootCompleteReceiver的java class  代码如下</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</div><div class="line">       Toast.makeText(context, <span class="string">"网络改变"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">  		 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在AndroidManifest.xml文件中注册广播接收器<br>  代码如下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在AndroidManifest.xml中声明权限</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用内部子类（在Activity中定义）"><a href="#使用内部子类（在Activity中定义）" class="headerlink" title="使用内部子类（在Activity中定义）"></a>使用内部子类（在Activity中定义）</h3><hr>
<p><strong>在这晕圈了一下午，找不出毛病。看书多仔细吧，书上说了不用内部子类。</strong><br>详细资料在这里</p>
<blockquote>
<p><a href="http://blog.csdn.net/chdjj/article/details/19496567" target="_blank" rel="external">http://blog.csdn.net/chdjj/article/details/19496567</a></p>
</blockquote>
<hr>
<ul>
<li><strong>清单文件注册广播接收者时，广播接收者的名字格式需要注意因为是内部类，所以需要在内部类所在的类与内部类之间加上$符号</strong>(这一点在AndroidStudio中输入时有提示)</li>
<li><strong>内部类在声明时一定要写成静态内部类（class关键字前加上static）。否则会抛出异常</strong>（广播发生时，应用停止运行）</li>
</ul>
<hr>
<ul>
<li><p>在MainActivity中新建子类</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</div><div class="line">        Toast.makeText(context, <span class="string">"Boot complete"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在AndroidManifest.xml中注册广播接收器</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".MainActivity$BootCompleteReceiver"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在AndroidManifest.xml中声明权限</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行效果同动态注册</p>
</li>
</ul>
<h2 id="使用广播接收器注意事项"><a href="#使用广播接收器注意事项" class="headerlink" title="使用广播接收器注意事项"></a>使用广播接收器注意事项</h2><ul>
<li>在onReceive()方法中不宜添加过多逻辑/耗时操作，广播接收器没有多线程，一旦时间过长，程序就会报错。</li>
<li>广播接收器一般为启动其他组件作用。</li>
</ul>
<h2 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h2><hr>
<ul>
<li><p>发送标准广播之前，首先要注册一个作为目标的广播接收器。（过程略，只上代码）<br>  新建MyBroadcastReceiver.class</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span></div><div class="line">   &#123;</div><div class="line">    Toast.makeText(context,<span class="string">"MyBroadcastReceiver"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在Xml中注册（静态）</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MyBroad"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>xml中注册一个Button</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:onClick</span>=<span class="string">"SendBroad"</span></div><div class="line">   <span class="attr">android:text</span>=<span class="string">"SendBroad"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>MainActivity中新建 SendBroad()函数<br>  首先构建一个 Intent对象，将自定义的广播值填入。再调用sendBroadcast方法将广播发送出去。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendBroad</span><span class="params">(View view)</span></span></div><div class="line">&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MyBroad"</span>);</div><div class="line">    sendBroadcast(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>发送的是标准广播。运行效果如下图。<br>  <a href="http://snapgr.am/image/L2ou" target="_blank" rel="external"><img src="http://cdn4.snapgram.co/images/2016/09/10/Screenshot_20160910-220121.png" alt="Screenshot_20160910-220121.png"></a></p>
</li>
</ul>
<h2 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h2><hr>
<ul>
<li><p>首先新建一个Broad2 的工程。同样接收Broad发送的广播。<br>  代码如下</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherBroadcast</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span></div><div class="line">   &#123;</div><div class="line">       Toast.makeText(context,<span class="string">" AnotherBroadcast"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".AnotherBroadcast"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"10"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MyBroad"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试效果：当摁下发送广播按钮后，弹出两个提示。</p>
</li>
</ul>
<hr>
<ul>
<li><p>修改Broad项目中onClick对应事件。将sendBroadcast(）改为sendOrderedBroadcast();发送有序广播。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendBroad</span><span class="params">(View view)</span></span></div><div class="line">&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MyBroad"</span>);</div><div class="line">    sendOrderedBroadcast(intent,<span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>效果与发送标准广播相同（还未定义优先级/截断等）</p>
</li>
<li><p>定义优先级，再Broad的AndroidMainfest.xml中修改注册的广播添加android:priority=”100”优先级100</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MyBroad"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Broad2的AndroidMainfest.xml中添加android:priority=”10”优先级10</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".AnotherBroadcast"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"10"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MyBroad"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>发送广播后MyBroadcastReceiver最先收到广播。</p>
</li>
<li><p>截断广播。有序广播中前一个广播接收器可以截断广播传播。添加 abortBroadcast();即可。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span></div><div class="line">   &#123;</div><div class="line">       Toast.makeText(context,<span class="string">"MyBroadcastReceiver"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">       abortBroadcast();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>再次点击按钮发送广播，只有MyBroadcastReceiver可以接收到发送的广播。</p>
</li>
</ul>
<h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><ul>
<li><p>只在app应用内部传递的广播。注册过程类似于动态注册。</p>
</li>
<li><p>定义一个内部类LocalReceiver继承自BroadcastReceiver</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</div><div class="line">        Toast.makeText(context, <span class="string">"received local broadcast"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>首先在onCreate()方法中通过localBroadcastManager.getInstan得到一个LocalBroadcastManager的实例，再创建IntentFilter实例和LocalReceiver实例。并在IntentFilter实例中添加广播。随后传入localBroadcastManager.registerReceiver()中注册本地广播。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> IntentFilter intentFilter;</div><div class="line"><span class="keyword">private</span> LocalReceiver localReceiver;</div><div class="line"><span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"></div><div class="line">    localBroadcastManager = localBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">    intentFilter.addAction(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</div><div class="line">    localReceiver = <span class="keyword">new</span> LocalReceiver();</div><div class="line">    localBroadcastManager.registerReceiver(localReceiver, intentFilter);       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在Activity的onDestroy()中销毁注册。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    localBroadcastManager.unregisterReceiver(localReceiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在Button对应的函数中调用localBroadcastManager.sendBroadcast发送本地广播。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendBroad</span><span class="params">(View view)</span></span></div><div class="line">&#123;</div><div class="line">      Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</div><div class="line">      localBroadcastManager.sendBroadcast(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>效果基本同上，不加累赘。不过在Broad2中是怎样都搜不到广播了。</p>
</li>
<li><p>本地广播特点</p>
<ul>
<li>明确广播只在应用内部，传递数据无需担心泄密。</li>
<li>其他程序广播无法发送至程序内部。</li>
<li>本地广播比全局广播更为高效。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BroadcastReceiver基础&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—Fragments</title>
    <link href="http://yoursite.com/2016/12/18/Android%E7%AC%94%E8%AE%B0-Fragments/"/>
    <id>http://yoursite.com/2016/12/18/Android笔记-Fragments/</id>
    <published>2016-12-18T04:00:00.000Z</published>
    <updated>2016-12-22T09:40:39.289Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
<li><a href="http://blog.csdn.net/vanpersie_9987/article/details/51311808" target="_blank" rel="external"> Android官方文档之App Components（Fragments）</a></li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3</li>
</ul>
<p>导语</p>
<ul>
<li>Fragments的艺术之旅</li>
</ul>
<hr>
<h2 id="Fragments简介"><a href="#Fragments简介" class="headerlink" title="Fragments简介"></a>Fragments简介</h2><ul>
<li>Fragment—片段 是Android 在 Android 3.0（API 11 级）中引入了，主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。</li>
<li>可以将多个片段组合在一个 Activity 中来构建多窗格 UI，以及在多个 Activity 中重复使用某个片段。可以将片段视为 Activity 的模块化组成部分，它具有自己的生命周期，能接收自己的输入事件，可以在 Activity 运行时添加或删除片段（类似于不同 Activity 中重复使用的“子 Activity”）</li>
<li><a href="https://developer.android.com/guide/components/fragments.html" target="_blank" rel="external">Google官方文档(中文)</a></li>
</ul>
<h2 id="创建Fragments"><a href="#创建Fragments" class="headerlink" title="创建Fragments"></a>创建Fragments</h2><ul>
<li>fragment创建过程与Activity类似。</li>
</ul>
<ul>
<li>创建Fragment，需要继承一个Fragment类，并实现Fragment的生命周期回调方法，如onCreate(), onStart(), onPause(), onStop()等</li>
</ul>
<ul>
<li>一般来说，在Fragment中应至少重写以下这些生命周期方法<br><strong>必须重写的时onCreateView()方法.</strong><ul>
<li>onCreate()：创建Fragment实例时，系统回调的方法。在该方法中，对一些必要的组件进行初始化</li>
<li>onCreateView()：Fragment上绘制UI时，回掉该方法。返回一个View对象，表示Fragment的根视图；若Fragment不需要绑定示图，可以返回null</li>
<li>onPause()：当用户离开Fragment时回调。在该方法中，对Fragment的数据信息做持久化的保存工作</li>
</ul>
</li>
</ul>
<h3 id="创建一个Fragment类"><a href="#创建一个Fragment类" class="headerlink" title="创建一个Fragment类"></a>创建一个Fragment类</h3><ul>
<li>新建first_fragme 继承自Fragment</li>
<li><p>Android Studio中 对应Fragment 包有两个，选择support-v4 _(这个版本可以再Android版本中保持Fragment特性一致)</p>
</li>
<li><p>Fragment并非一定要绑定一个布局文件，下面会提到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span> <span class="params">(LayoutInflater inflater, ViewGroup container, Bundle saveInstanceState)</span></span>&#123;</div><div class="line">       View view = inflater.inflate(R.layout.fragment_firest,container,<span class="keyword">false</span>);</div><div class="line">       <span class="keyword">return</span> view;</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>与此对应的fragment<em>firest布局文件 </em><br>LinearLayout加一个Button，背景颜色设置为了靛蓝色。</li>
</ul>
</li>
<li><p>onCreateView()方法</p>
<ul>
<li>ViewGroup来自宿主Activity容器布局，Fragment的布局将其作为根视图插入至该视图中。</li>
<li>Bundle用于回传之前占据该位置的Fragment实例所保存的Bundle信息，当该Fragment的新实例处于resume状态时，该参数被回传</li>
</ul>
</li>
<li><p>inflate() 方法</p>
<ul>
<li><p>参数1（int）：需要绑定的Layout的资源ID；</p>
</li>
<li><p>参数2（ViewGroup）：绑定的Layout布局的父视图；</p>
</li>
<li><p>参数3（boolean）：是否需要将参数1的Layout资源依附于，参数2的ViewGroup上，false，表示不依附。（系统已经默认将Layout插入至ViewGroup中，若为true，将添加一层冗余的视图</p>
</li>
</ul>
</li>
</ul>
<h3 id="在XML将fragment添加到activity"><a href="#在XML将fragment添加到activity" class="headerlink" title="在XML将fragment添加到activity"></a>在XML将fragment添加到activity</h3><ul>
<li><p>在activity_main.xml中添加如下代码。跟添加一个layout没有太大区别。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/left_fragment"</span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"ljy.com.fragmenttest.fragment_firest"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>至此一个fragment添加完毕。为了对比，再新建一个second_fragment，背景颜色不同，两者同时添加进activity_main中。</p>
</li>
<li><p><img src="http://cdn5.snapgram.co/images/2016/10/10/Screenshot_1476109113.png" alt="Screenshot_1476109113.png"></p>
</li>
<li><p>一般来说必须为fragment设定唯一的身份标识，以便当宿主Activity为restart状态时可以恢复fragment</p>
<ul>
<li>android:id属性为fragment指定唯一ID</li>
<li>android:tag属性为fragment指定唯一字符串标识</li>
<li>未指定，则该fragment的标识为其父容器控件的ID</li>
</ul>
</li>
</ul>
<h3 id="动态添加碎片"><a href="#动态添加碎片" class="headerlink" title="动态添加碎片"></a>动态添加碎片</h3><hr>
<ul>
<li><strong>处理片段时，请谨记：Activity 布局必须包含一个可以插入片段的容器 View</strong></li>
</ul>
<hr>
<ul>
<li><p>添加或移除片段必须使用 FragmentManager 创建 FragmentTransaction， FragmentTransaction将提供添加、移除、替换片段以及执行其他片段事务所需的 API。Activity 内调用 getSupportFragmentManager() 以获取 FragmentManager</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rightfragment right = <span class="keyword">new</span> rightfragment();</div><div class="line">FragmentManager fragmentManager = getSupportFragmentManager();</div></pre></td></tr></table></figure>
</li>
<li><p>调用 beginTransaction() 创建一个 FragmentTransaction事务，并调用 add() 添加一个片段，做好更改准备时，调用 commit()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FragmentTransaction transaction = fragmentManager.beginTransaction();</div><div class="line">transaction.replace(R.id.right_layout,right);</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure>
</li>
<li><p>示例：</p>
<ul>
<li><p>首先改造一下activity<em>main.xml</em><br>FrameLayout包含一个left_fragment</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">FrameLayout</span>  </span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/right_layout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/left_fragment"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.example.fragment_text.leftfragment"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在MainActivity的onCreate方法中添加fragment</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建准备替换的Fragment实例</span></div><div class="line">rightfragment right = <span class="keyword">new</span> rightfragment();</div><div class="line"></div><div class="line"><span class="comment">//新建FragmentManager</span></div><div class="line">FragmentManager fragmentManager = getSupportFragmentManager();</div><div class="line"><span class="comment">// 调用beginTransaction() 创建FragmentTransaction</span></div><div class="line">FragmentTransaction transaction = fragmentManager.beginTransaction();</div><div class="line"></div><div class="line"><span class="comment">//FragmentTransaction内处理添加/替换等。</span></div><div class="line">transaction.replace(R.id.right_layout,right);</div><div class="line"></div><div class="line"><span class="comment">//最后执行commit()方法</span></div><div class="line">transaction.commit();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="管理Fragments-执行Fragment事务"><a href="#管理Fragments-执行Fragment事务" class="headerlink" title="管理Fragments/执行Fragment事务"></a>管理Fragments/执行Fragment事务</h2><ul>
<li><p>Activity中管理Fragment，使用FragmentManager(</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FragmentManager fragmentManager = getFragmentManager();</div></pre></td></tr></table></figure>
<p>可以实现的操作</p>
<ul>
<li>findFragmentById()方法获取由Activity管辖的绑定了UI的Fragment实例</li>
<li>popBackStack()方法将Fragment从后退栈中弹出</li>
<li>addOnBackStackChangedListener()方法注册监听器，用于监听后退栈的变化</li>
</ul>
</li>
<li><p>Fragment可实现动态添加、删除、替换 等 操作，每一组向Activity提交的变化称为事务，使用FragmentTransaction这操作事务,调用beginTransaction(）开启一个事务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FragmentManager fragmentManager = getFragmentManager();</div><div class="line">FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div></pre></td></tr></table></figure>
<p>可实现对Feagment的操作</p>
<ul>
<li>add()  //添加</li>
<li>remove()   //移除</li>
<li>replace()   //替换</li>
</ul>
</li>
<li><p>事务要在Activity中生效，调用commit()方法提交</p>
</li>
<li><p>commit()方法之前，调用addToBackStack()方法，可以将该事物添加到由Activity管辖的Fragment返回栈中。点击Back键即撤销该事物提交的更改</p>
</li>
</ul>
<hr>
<ul>
<li><p>使用FragmentTransaction操作事务时注意</p>
<ul>
<li>commit()必须在最后调用</li>
<li>一个布局容器中添加多个Fragment，加入的顺序决定了这些Fragment绑定的UI视图在View树中的层级顺序</li>
</ul>
</li>
<li><p>commit()方法提交后，并不会立即执行事务，UI更新只能在主线程中进行，主线程空闲时，才会执行事务操作<br>Android也提供了 在UI线程中调用executePendingTransactions()方法，使commit()方法调用后立即执行提交的事务（一般用不到）</p>
</li>
</ul>
<hr>
<h2 id="与-Activity-通信"><a href="#与-Activity-通信" class="headerlink" title="与 Activity 通信"></a>与 Activity 通信</h2><ul>
<li><p>Fragment 中获取 Activity 实例<br> getActivity()方法可以获取到 Activity 实例</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MainActivity activity = (MainActivity) getActivity();</div></pre></td></tr></table></figure>
<p> 调用Activity中的试图也很简单，使用findViewById()即可，getActivity()方法返回的既是一个Context对象</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">View listView = getActivity().findViewById(R.id.list);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>在Fragment中使用Context对象，getActivity()方法，只能是在fragment已经依附于Activity后才能调用。当fragment未依附于某个Activity、或fragment已经处于其生命周期的末尾而不再依附于某个Activity时，调用getActivity()方法会直接返回null</li>
</ul>
<hr>
<ul>
<li><p>Activity 中获取 Fragment 实例()<br>FragmentManger提供了findFragmentById()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RightFragment fragment = (RightFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</div></pre></td></tr></table></figure>
<p>如果使用的使support-V4包，则 getFragmentManager()改为getSupportFragmentManager()，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RightFragment fragment = (RightFragment)getSupportFragmentManager().findFragmentById(R.id.example_fragment);</div></pre></td></tr></table></figure>
</li>
<li><p>Fragment与Frangment之间也可以通过宿主Activity，获取到另一个Fragment实例，调用另一个Fragment中的方法</p>
</li>
</ul>
<h3 id="为Activity创建事件回调"><a href="#为Activity创建事件回调" class="headerlink" title="为Activity创建事件回调"></a>为Activity创建事件回调</h3><ul>
<li>占坑，</li>
</ul>
<h2 id="Frangment的生命周期"><a href="#Frangment的生命周期" class="headerlink" title="Frangment的生命周期"></a>Frangment的生命周期</h2><ul>
<li><p>与Activity极为相似，且 Frangment的生命周期与宿主Activity有很大关联</p>
</li>
<li><p>有3种状态</p>
<ul>
<li>Resumed继续：宿主Activity处于running，Fragment处于可见状态</li>
<li>Paused暂停：另一个Activity处于前台并获得了焦点，该Fragment的宿主Activity并未被全部遮挡</li>
<li>Stopped停止：Fragment不可见或Fragment已被Activity移除，宿主Activity被回收时，Fragment也将被回收</li>
</ul>
</li>
</ul>
<ul>
<li><img src="http://cdn3.snapgram.co/imgs/2016/12/22/fragment_lifecycle.png" alt="fragment_lifecycle.png"></li>
</ul>
<h3 id="宿主Activity的影响"><a href="#宿主Activity的影响" class="headerlink" title="宿主Activity的影响"></a>宿主Activity的影响</h3><ul>
<li><a href="http://snapgr.am/image/L5KP" target="_blank" rel="external"><img src="http://cdn1.snapgram.co/imgs/2016/12/22/activity_fragment_lifecycle.png" alt="activity_fragment_lifecycle.png"></a></li>
</ul>
<hr>
<h4 id="重要回调方法"><a href="#重要回调方法" class="headerlink" title="重要回调方法"></a>重要回调方法</h4><ul>
<li>onAttach()：fragment关联Activity时回调</li>
<li>onCreateView()：fragment绑定UI视图(加载布局)时回调</li>
<li>onActivityCreated()：宿主Activity创建完毕  (宿主Activity的onCreate()方法返回)  后调用</li>
<li>onDestroyView()：与fragment绑定的UI视图被移除时回调</li>
<li>onDetach()：fragment不再依附于Activity时回调</li>
</ul>
<hr>
<ul>
<li><p>Activity 与Fragment在生命周期之间的最显著差异在于它们在其各自返回栈中的存储方式。<br>默认情况下，Activity 停止时会被放入由系统管理的 Activity 返回栈（以便用户通过返回按钮回退到 Activity），<br>Frament仅当您在移除片段的事务执行期间通过调用 addToBackStack() 请求保存实例时，系统才会将Fragment放入由宿主 Activity 管理的返回栈。</p>
</li>
<li><p>一旦Activity处于resume状态时，可以自由地添加或移除fragment，也就是说，只有当Activity的状态为resume时，fragment才能够自由地控制自己的生命周期</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/vanpersie_9987/article/details/51311808&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—UI-RecyclerView</title>
    <link href="http://yoursite.com/2016/12/16/Android%E7%AC%94%E8%AE%B0-UI-RecyclerView/"/>
    <id>http://yoursite.com/2016/12/16/Android笔记-UI-RecyclerView/</id>
    <published>2016-12-16T04:00:00.000Z</published>
    <updated>2016-12-22T09:19:29.745Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>第一行代码(第二版)</li>
<li><a href="http://blog.cgsdream.org/2015/06/11/recyclerview/" target="_blank" rel="external">RecyclerView使用详解—六和敬</a></li>
<li><a href="http://jinyudong.com/2014/11/13/Introduce-RecyclerView-%E4%B8%80/" target="_blank" rel="external">RecyclerView使用介绍— Jin Yudong</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="external">Android RecyclerView 使用完全解析 体验艺术般的控件—鸿洋_</a></li>
<li><a href="https://developer.android.com/training/material/lists-cards.html#RecyclerView" target="_blank" rel="external">创建列表与卡片—Android Developer</a></li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>RecyclerView内容较ListView更多，初期只能更新一些基础内容，高级的用法随时更新，长期跟进</li>
</ul>
<hr>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html" target="_blank" rel="external">RecyclerView</a>是用于取代ListView的组件,第一次出现是在2014年google I/O大会，内置在是Android L及以上版本的SDK中。</li>
<li>对比与ListView，RecyclerView弥补了ListView中的效率问题，同时支持更多的显示效果，代码逻辑更为清晰</li>
</ul>
<h3 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h3><hr>
<ul>
<li>RecyclerView定义在support库中，使用RecyclerView之前必须在添加依赖</li>
<li>build.gradle中添加<br> <code>compile &#39;com.android.support:recyclerview-v7:25.1.0&#39;</code></li>
</ul>
<hr>
<ul>
<li><p>RecyclerView项目结构如下：<br><img src="http://cdn1.snapgram.co/imgs/2016/12/16/RecyclerView.png" alt="RecyclerView.png"></p>
</li>
<li><p>要使用RecyclerView，需要指定<strong>一个Adapter适配器</strong>和一个<strong>LayoutManager布局管理器</strong></p>
</li>
<li><p><strong>Adapter适配器</strong>：作用与ListView中使用的Adapter相同，都是将数据与对应item的界面进行绑定<br>所不同的是：RecyclerView中适配器必须继承自RecyclerView.Adapter，且 强制使用了ViewHolder</p>
</li>
</ul>
<ul>
<li><p><strong>LayoutManager布局管理器</strong>：每一个item如何进行排列，何时展示和隐藏。<br>重用View时，LayoutManager会向Adapter适配器请求新的数据替换旧的数据，避免了View的冗余和频繁调用findViewById</p>
<p>LayoutManager的引入 使得各种布局排列编写，变的格外容易，这也是RecyclerView优于ListView的一个地方</p>
</li>
<li><p>目前RecyclerView 内置3种LayoutManager：</p>
<ul>
<li>LinearLayoutManager 横向/竖向布局</li>
<li>GridLayoutManager  网格布局</li>
<li>StaggeredGridLayoutManager  瀑布流布局</li>
</ul>
</li>
</ul>
<ul>
<li><p>MainActivity中 RecyclerView 设置  </p>
<ol>
<li><p>创建RecyclerView对象<br><code>RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycle_view);</code></p>
</li>
<li><p>设置LayoutManager显示规则</p>
</li>
<li><p>设置适配器<br><code>recyclerview.setAdapter(adapter);</code></p>
</li>
</ol>
</li>
</ul>
<h4 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h4><p>由一个简单的实例+详细分析</p>
<ul>
<li><p>添加依赖<br>打开app/build.gradle文件，在dependencies闭包下添加依赖库<br>版本与你工程的<code>com.android.support:appcompat-v7:25.1.0</code>版本对应</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:recyclerview-v7:25.1.0'</span></div></pre></td></tr></table></figure>
<p>之后AndroidStudio会开始同步</p>
</li>
<li><p>添加RecyclerView到xml文件,基本与ListView一致，不过RecyclerView并非内置在SDK中，这里需要写出完整的包路径</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/recycle_view"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">      /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>要展示的依旧是水果+图片形式，<br>图片资源在第一行代码第二版源码 /chapter3/ListViewTest\app\src\main\res\drawable-hdpi下，同时将Fruit类和fruit<em>item.xml一并复制，这里给出两者源码，不再加分析</em></p>
<ul>
<li><p>Fruit类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.imageId = imageId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> imageId;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>fruit<em>item.xml  </em></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>准备RecyclerView适配器，适配器需要继承自  RecyclerView.Adapter，将泛型指定为   .ViewHolder，(ViewHolder为在适配器的一个内部类)，并重写3个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType)//创建返回ViewHolder实例</div><div class="line">public void onBindViewHolder(ViewHolder holder,int pisition)//数据与界面绑定</div><div class="line">public int getItemCount()  // 返回数据的数量</div></pre></td></tr></table></figure>
<p> 新建 FruitAdapter 继承自  RecyclerView.Adapter</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//继承自RecyclerView.Adapter，泛型为  FruitAdapter .ViewHolder</span></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">   <span class="comment">//私有Fruit列表</span></div><div class="line">   <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</div><div class="line"></div><div class="line"><span class="comment">//新建内部类ViewHolder继承自RecyclerView.ViewHolde有每个Item的的所有界面元素</span></div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">       ImageView fruitImage;</div><div class="line">       TextView fruitName;</div><div class="line">       <span class="comment">//ViewHolder构造函数，传入View，通常为RecyclerView子项的外层布局(本例为fruit_item.xml)</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</div><div class="line">           <span class="keyword">super</span>(view);</div><div class="line">           <span class="comment">//findViewById获取  Image/Name实例</span></div><div class="line">           fruitImage = (ImageView)view.findViewById(R.id.fruit_image);</div><div class="line">           fruitName = (TextView)view.findViewById(R.id.fruit_name);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//FruitAdapter构造函数，将数据源传入全局变量mFruitList</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(List&lt;Fruit&gt;fruitList)</span></span>&#123;</div><div class="line">       mFruitList = fruitList;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="comment">//创建ViewHolder实例</span></div><div class="line">   <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent,<span class="keyword">int</span> viewType)</span></span>&#123;</div><div class="line">       <span class="comment">//加载布局文件</span></div><div class="line">       View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="keyword">false</span>);</div><div class="line">       <span class="comment">//调用ViewHolder构造函数</span></div><div class="line">       ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">       <span class="comment">//返回ViewHolder实例</span></div><div class="line">       <span class="keyword">return</span> holder;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="comment">//对 RecyclerView子项进行赋值，有新的子项进入屏幕显示范围时调用</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder,<span class="keyword">int</span> pisition)</span></span>&#123;</div><div class="line">       Fruit fruit = mFruitList.get(pisition);</div><div class="line">       holder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">       holder.fruitName.setText(fruit.getName());</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="comment">//返回 RecyclerView子项数量</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> mFruitList.size();</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>MainActivity中使用RecyclerView</p>
<ul>
<li><p>创建RecyclerView对象</p>
</li>
<li><p>设置LayoutManager显示规则（默认竖向滚动）</p>
</li>
<li><p>设置适配器</p>
</li>
</ul>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"><span class="comment">//私有列表</span></div><div class="line">   <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</div><div class="line">   </div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.activity_main);</div><div class="line">	</div><div class="line">       <span class="comment">//初始化Fruits数据</span></div><div class="line">       initFruits();</div><div class="line">       <span class="comment">//获取RecyclerView实例</span></div><div class="line">       RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycle_view);</div><div class="line">       </div><div class="line">       <span class="comment">//创建LinearLayoutManager，并设置入recyclerView</span></div><div class="line">       LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">       recyclerView.setLayoutManager(layoutManager);</div><div class="line">       </div><div class="line">       <span class="comment">//新建适配器，并传入</span></div><div class="line">       FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">       recyclerView.setAdapter(adapter);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//初始化Fruits类</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//循环两遍 怕占不满屏幕</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">           Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">"Apple"</span>, R.drawable.apple_pic);</div><div class="line">           fruitList.add(apple);</div><div class="line">           Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">"Banana"</span>, R.drawable.banana_pic);</div><div class="line">           fruitList.add(banana);</div><div class="line">           Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">"Orange"</span>, R.drawable.orange_pic);</div><div class="line">           fruitList.add(orange);</div><div class="line">           Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">"Watermelon"</span>, R.drawable.watermelon_pic);</div><div class="line">           fruitList.add(watermelon);</div><div class="line">           Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">"Pear"</span>, R.drawable.pear_pic);</div><div class="line">           fruitList.add(pear);</div><div class="line">           Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">"Grape"</span>, R.drawable.grape_pic);</div><div class="line">           fruitList.add(grape);</div><div class="line">           Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">"Pineapple"</span>, R.drawable.pineapple_pic);</div><div class="line">           fruitList.add(pineapple);</div><div class="line">           Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">"Strawberry"</span>, R.drawable.strawberry_pic);</div><div class="line">           fruitList.add(strawberry);</div><div class="line">           Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">"Cherry"</span>, R.drawable.cherry_pic);</div><div class="line">           fruitList.add(cherry);</div><div class="line">           Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">"Mango"</span>, R.drawable.mango_pic);</div><div class="line">           fruitList.add(mango);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这样最简单的 RecyclerView 就搭建完了效果如下<br><img src="http://cdn5.snapgram.co/images/2016/12/16/ScreenShot_20161216105246.png" alt="ScreenShot_20161216105246.png"></p>
</li>
<li><p>代码比ListView稍多，但是逻辑比较清晰。</p>
</li>
</ul>
<h3 id="横向-瀑布流-网格布局"><a href="#横向-瀑布流-网格布局" class="headerlink" title="横向/瀑布流/网格布局"></a>横向/瀑布流/网格布局</h3><ul>
<li>只需要设置相应LayoutManager即可   /手动滑稽  <h4 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h4></li>
<li><p>在 LinearLayoutManager 中修改几行代码即可</p>
</li>
<li><p>修改 LinearLayoutManager 代码，添加一行，搞定！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>当然需要简单修改一下item的布局文件，LinearLayout改为垂直排列，宽度固定100dp，图片/文字居中<br>效果如下<br><img src="http://cdn2.snapgram.co/imgs/2016/12/16/ScreenShot_20161216105723.png" alt="ScreenShot_20161216105723.png"></li>
</ul>
<h4 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h4><ul>
<li>这需要 StaggeredGridLayoutManager 布局管理器，可以 竖向/横向 滚动</li>
<li>代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//瀑布流布局，3行，竖向</span></div><div class="line">StaggeredGridLayoutManager layoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>调整布局文件，效果如下<br><img src="http://cdn1.snapgram.co/imgs/2016/12/16/ScreenShot_20161216215538.png" alt="ScreenShot_20161216215538.png"></li>
</ul>
<h4 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h4><ul>
<li>这需要 GridLayoutManager 布局管理器</li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//网格布局，两行</span></div><div class="line">GridLayoutManager layoutManager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>调整布局文件后，效果如下<br><img src="http://cdn4.snapgram.co/images/2016/12/16/ScreenShot_20161216220321.png" alt="ScreenShot_20161216220321.png"></p>
</li>
</ul>
<h3 id="注册点击事件"><a href="#注册点击事件" class="headerlink" title="注册点击事件"></a>注册点击事件</h3><ul>
<li>RecyclerView 中并没有提供注册监听器的方法，需要子项View自行注册</li>
<li>部分代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    View fruitView;</div><div class="line">    ImageView fruitImage;</div><div class="line">    TextView fruitName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(view);</div><div class="line">        fruitView = view;</div><div class="line">        fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</div><div class="line">        fruitName = (TextView) view.findViewById(R.id.fruit_name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">    holder.fruitView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">            Fruit fruit = mFruitList.get(position);</div><div class="line">            Toast.makeText(v.getContext(), <span class="string">"you clicked view "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    holder.fruitImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">            Fruit fruit = mFruitList.get(position);</div><div class="line">            Toast.makeText(v.getContext(), <span class="string">"you clicked image "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> holder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cgsdream.org/2015/06/11/recyclerview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;R
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记-UI-ListView</title>
    <link href="http://yoursite.com/2016/12/13/Android%E7%AC%94%E8%AE%B0-UI-ListView/"/>
    <id>http://yoursite.com/2016/12/13/Android笔记-UI-ListView/</id>
    <published>2016-12-13T10:00:00.000Z</published>
    <updated>2016-12-14T15:05:03.128Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ul>
<li>资料来源如下</li>
<li>第一行代码(第二版)</li>
<li><a href="https://developer.android.com/reference/android/widget/ListView.html" target="_blank" rel="external">ListView</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/44996879" target="_blank" rel="external"> Android ListView工作原理完全解析，带你从源码的角度彻底理解</a></li>
</ul>
<hr>
<ul>
<li>ListView是所有原生控件中使用频率最高和最复杂的，涉及知识点也较多，专门抽出一篇来记录，涉及一些过程分析，希望自己能写完</li>
</ul>
<hr>
<h3 id="ListView的简单使用"><a href="#ListView的简单使用" class="headerlink" title="ListView的简单使用"></a>ListView的简单使用</h3><ul>
<li><p>先来看一下一个简单的实例<br>代码如下</p>
<ul>
<li><p>在activity_main.xml中添加_ListView</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/list_view"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改MainActivity的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//要显示的数组，屏幕长了点，为了显示滑动效果多增加了几项。</span></div><div class="line">   <span class="keyword">private</span> String[] data = &#123;<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"watermelon"</span>,<span class="string">"pear"</span>,<span class="string">"grape"</span>,<span class="string">"pineapple"</span>,<span class="string">"strawberry"</span>,<span class="string">"cherry"</span>,<span class="string">"mango"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>&#125;;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">      Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">      setSupportActionBar(toolbar);</div><div class="line"></div><div class="line"><span class="comment">//为适配器绑定数据</span></div><div class="line">	ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>,android.R.layout.simple_list_item_single_choice,data);</div><div class="line"><span class="comment">//得到ListView对象的引用</span></div><div class="line">ListView listView = (ListView) findViewById(R.id.list_view);</div><div class="line"><span class="comment">//适配器内容传递</span></div><div class="line">listView.setAdapter(adapter);   </div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>效果如图<br><img src="http://cdn1.snapgram.co/imgs/2016/12/14/Screenshot_20160812-170816.png" alt="Screenshot_20160812-170816.png">    </p>
</li>
<li><p>步骤其实比较简单</p>
<ul>
<li>准备要显示的数据 ——String[] data数组</li>
<li>构建适配器  ——ArrayAdapter<string> adapter</string></li>
<li>将适配器添加到ListView ——listView.setAdapter(adapter);   </li>
</ul>
</li>
<li><p>详解</p>
<ul>
<li>ListView首先是用来展现大量数据的，<br>数据源的来源可以是网络下载，程序内置、数据库提取等，本例中则是简单的定义了一个String类型 data数组。<br>数据源的类型/种类繁多，使得ListView无法直接适配数据源，直接适配数据源将导致代码的臃肿和效率的低下。ListView与数据源之间需要一个过度</li>
<li>适配器：Adapter，Adapter在ListView和数据源之间起到了一个桥梁的作用。正是Adapter的使用ListView的使用变得要比其它控件复杂得多。</li>
</ul>
</li>
</ul>
<h3 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h3><ul>
<li><p>Adapter适配器在ListView和数据源之间起到了一个桥梁的作用Adapter的接口都是统一的，因此ListView不用担心任何适配方面的问题。</p>
<p>Adapter又是一个接口(interface)，它可以去实现各种各样的子类，每个子类都能通过自己的逻辑来去完成特定的功能，以及与特定数据源的适配操作，比如说ArrayAdapter可以用于数组和List类型的数据源适配，SimpleCursorAdapter可以用于游标类型的数据源适配</p>
<p>这样就解决了数据源适配的难题，并且还拥有相当不错的扩展性</p>
</li>
<li><p>简易的示图(来自  郭霖的博客)<br><img src="http://cdn3.snapgram.co/imgs/2016/12/14/SouthEast.png" alt="SouthEast.png"></p>
</li>
<li><p>常用Adapter</p>
<p>ArrayAdapter<t>——用来绑定一个数组，支持泛型操作</t></p>
<p>SimpleAdapter——用来绑定在xml中定义的控件对应的数据</p>
<p>SimpleCursorAdapter——用来绑定游标得到的数据</p>
<p>BaseAdapter——通用的基础适配器</p>
</li>
<li><p>实例中使用的是ArrayAdapter，ArrayAdapter具有多个构造函数重载，这里使用的是字符串类型，</p>
</li>
<li>ArrayAdapter的构造函数<ul>
<li>当前上下文</li>
<li>ListView子项的id，本例中使用的是android.R.layout.simple_list_item 这是Android内置的一个布局文件</li>
<li>需要适配的数据<br>之后适配器就构建完成，最后传递进LIstView中即可</li>
</ul>
</li>
</ul>
<h4 id="自定义适配器"><a href="#自定义适配器" class="headerlink" title="自定义适配器"></a>自定义适配器</h4><ul>
<li>从第一行代码第二版的源码LiseViewTest目录下拷贝drawble<em>hdpi </em>到你的工程下</li>
<li><p>新建Fruit类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line">  <span class="comment">//构造函数   水果名称/水果对应图片资源ID</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">      <span class="keyword">this</span>.imageId = imageId;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> imageId;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在layout目录下新建fruit<em>item.xml  </em></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">      <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一个ImageView和TextView ，水平居中显示</p>
</li>
<li><p>自定义适配器继承自ArrayAdapter 泛型指定为fruit类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//继承自ArrayAdapter</span></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Fruit</span>&gt; </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</div><div class="line"><span class="comment">//构造函数  /上下文  ListView子项布局id    数据</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(Context context, <span class="keyword">int</span> textViewResourceId,</span></span></div><div class="line">                       List&lt;Fruit&gt; objects) &#123;</div><div class="line">       <span class="keyword">super</span>(context, textViewResourceId, objects);</div><div class="line">       resourceId = textViewResourceId;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="comment">//当前子元素的的位置，</span></div><div class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</div><div class="line">       Fruit fruit = getItem(position); <span class="comment">// 获取当前项的Fruit实例</span></div><div class="line">       View view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</div><div class="line">       ImageView fruitImage = (ImageView)view.findViewById(R.id.fruit_image);</div><div class="line">       TextView fruitName = (TextView)view.findViewById(R.id.fruit_name);</div><div class="line">       fruitImage.setImageResource(fruit.getImageId());</div><div class="line">       fruitName.setText(fruit.getName());</div><div class="line">       <span class="keyword">return</span> view;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>getView()方法接受的三个参数，第一个参数position代表当前子元素的的位置，我们可以通过具体的位置来获取与其相关的数据。第二个参数convertView</li>
<li>LayoutInflater.inflate()方法来去加载布局。接收3个参数，第三个参数为false表示只在父布局声明的layout属性有效，但不会为这个view添加父布局，最后设定为接下来会对这个view进行一些属性和值的设定，最后将view返回。</li>
</ul>
</li>
<li><p>修改MainActivity的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//新建Fruit类的数组</span></div><div class="line">  <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line"><span class="comment">// 初始化水果数据</span></div><div class="line">      initFruits();</div><div class="line">      <span class="comment">//设置FruitAdapter适配器</span></div><div class="line">      FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(MainActivity.<span class="keyword">this</span>, R.layout.fruit_item, fruitList);</div><div class="line">      <span class="comment">//得到ListView的引用</span></div><div class="line">      ListView listView = (ListView) findViewById(R.id.list_view);</div><div class="line">      listView.setAdapter(adapter);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 初始化水果数据</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">//填充两遍，占满屏幕</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">          Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">"Apple"</span>, R.drawable.apple_pic);</div><div class="line">          fruitList.add(apple);</div><div class="line">          Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">"Banana"</span>, R.drawable.banana_pic);</div><div class="line">          fruitList.add(banana);</div><div class="line">          Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">"Orange"</span>, R.drawable.orange_pic);</div><div class="line">          fruitList.add(orange);</div><div class="line">          Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">"Watermelon"</span>, R.drawable.watermelon_pic);</div><div class="line">          fruitList.add(watermelon);</div><div class="line">          Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">"Pear"</span>, R.drawable.pear_pic);</div><div class="line">          fruitList.add(pear);</div><div class="line">          Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">"Grape"</span>, R.drawable.grape_pic);</div><div class="line">          fruitList.add(grape);</div><div class="line">          Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">"Pineapple"</span>, R.drawable.pineapple_pic);</div><div class="line">          fruitList.add(pineapple);</div><div class="line">          Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">"Strawberry"</span>, R.drawable.strawberry_pic);</div><div class="line">          fruitList.add(strawberry);</div><div class="line">          Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">"Cherry"</span>, R.drawable.cherry_pic);</div><div class="line">          fruitList.add(cherry);</div><div class="line">          Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">"Mango"</span>, R.drawable.mango_pic);</div><div class="line">          fruitList.add(mango);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>只需要修改fruit<em>item.xml，即可定制界面</em></p>
</li>
</ul>
<h3 id="提升ListView的效率"><a href="#提升ListView的效率" class="headerlink" title="提升ListView的效率"></a>提升ListView的效率</h3><h4 id="convertView参数"><a href="#convertView参数" class="headerlink" title="convertView参数"></a>convertView参数</h4><ul>
<li>针对  <code>Fruit fruit = getItem(position); // 获取当前项的Fruit实例</code><br>每次滑动ListView时，getView()方法都会将布局都会重新加载一边</li>
<li>convertView参数：将之前加载完成的布局进行缓存。</li>
<li>借助convertView参数，在每次加载View之前查询convertView是否为空，为空则重新加载，不为空则从convertView中取</li>
<li><p>代码部分如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">View view;</div><div class="line">Fruit fruit = getItem(position); <span class="comment">// 获取当前项的Fruit实例</span></div><div class="line"></div><div class="line"> <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">      view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</div><div class="line"> &#125;<span class="keyword">else</span> &#123;</div><div class="line">      view = convertView;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ListView不会再重复加载布局了</p>
<h4 id="ViewHolder"><a href="#ViewHolder" class="headerlink" title="ViewHolder"></a>ViewHolder</h4></li>
<li>ViewHolder不是Android的开发API，而是一种设计方法</li>
<li><p>针对<br><code>ImageView fruitImage = (ImageView)view.findViewById(R.id.fruit_image);
TextView fruitName = (TextView)view.findViewById(R.id.fruit_name);</code><br>每次布局实例化后，findViewById都会重新执行获取控件实例</p>
</li>
<li><p>新增内部类 ViewHolder，利用Tag附加到对应View中，即每次加载布局时，对应的  获取控件实例的操作也一并执行，并储存在View中。这样 获取控件实例的操作直接缓存在View中，不会再重复执行</p>
</li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">       Fruit fruit = getItem(position); <span class="comment">// 获取当前项的Fruit实例</span></div><div class="line">       View view;</div><div class="line">       ViewHolder viewHolder;</div><div class="line">       <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="comment">//加载布局</span></div><div class="line">           view = LayoutInflater.from(getContext()).inflate(resourceId, parent, <span class="keyword">false</span>);</div><div class="line">           viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line">           viewHolder.fruitImage = (ImageView) view.findViewById (R.id.fruit_image);</div><div class="line">           viewHolder.fruitName = (TextView) view.findViewById (R.id.fruit_name);</div><div class="line">           view.setTag(viewHolder); <span class="comment">// 将ViewHolder存储在View中</span></div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           view = convertView;</div><div class="line">           viewHolder = (ViewHolder) view.getTag(); <span class="comment">// 重新获取ViewHolder</span></div><div class="line">       &#125;</div><div class="line">       viewHolder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">       viewHolder.fruitName.setText(fruit.getName());</div><div class="line">       <span class="keyword">return</span> view;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//ViewHolder 内部类</span></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">       ImageView fruitImage;</div><div class="line"></div><div class="line">       TextView fruitName;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="ListView中的点击事件"><a href="#ListView中的点击事件" class="headerlink" title="ListView中的点击事件"></a>ListView中的点击事件</h3><ul>
<li>比较简单,再MainActivty的onCreate方法中添加</li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">listView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view,</span></span></div><div class="line">                                  <span class="keyword">int</span> position, <span class="keyword">long</span> id) &#123;</div><div class="line">              Fruit fruit = fruitList.get(position);</div><div class="line">              Toast.makeText(MainActivity.<span class="keyword">this</span>, fruit.getName(), Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
</li>
<li><p>setOnItemClickListener为ListView注册了一个监听器，点击发生时回掉 onItemClick()方法，该方法通过position参数判断具体子项。该处是执行Toast</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;资料来源如下&lt;/li&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/widget/ListView.html&quot; target=&quot;_bl
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—UI(一)</title>
    <link href="http://yoursite.com/2016/12/09/Android%E7%AC%94%E8%AE%B0-UI(%E4%B8%80)/"/>
    <id>http://yoursite.com/2016/12/09/Android笔记-UI(一)/</id>
    <published>2016-12-09T04:00:00.000Z</published>
    <updated>2016-12-14T15:00:48.852Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ul>
<li>资料来源如下</li>
<li>第一行代码(第二版)</li>
</ul>
<hr>
<h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><ul>
<li><a href="https://developer.android.com/reference/android/widget/TextView.html" target="_blank" rel="external">TextView</a>  显示文本信息</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">      android:id=&quot;@+id/text_view&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;</div><div class="line">      android:gravity=&quot;center&quot;</div><div class="line">      android:textSize=&quot;24sp&quot;</div><div class="line">      android:textColor=&quot;#00ff00&quot;</div><div class="line">      android:text=&quot;This is TextView&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下<br><img src="http://cdn4.snapgram.co/images/2016/12/09/ScreenShot_20161209145323.png" alt="ScreenShot_20161209145323.png"></p>
</li>
</ul>
<h4 id="常用属性详解"><a href="#常用属性详解" class="headerlink" title="常用属性详解"></a>常用属性详解</h4><ul>
<li>android:id 指定当前控件唯一标识符</li>
<li><p>android:layout_width    android:layout_height<br>指定控件的宽度和高度，取值有</p>
<ul>
<li>match_parent 匹配父布局  </li>
<li>wrap_content自适应内容  </li>
<li>fill_parent与match_parent 相同</li>
</ul>
</li>
<li><p>android:gravity 文字对齐方式，<br>可取值 top bottom left right center  可以使用 | 同时使用多个属性</p>
</li>
<li><p>android:text  文本内容</p>
</li>
<li><p>android:textSize    android:textColor  文本的大小/颜色</p>
</li>
</ul>
<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><ul>
<li><a href="https://developer.android.com/reference/android/widget/Button.html" target="_blank" rel="external">Button</a>  按钮</li>
<li><p>代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button"</span></div><div class="line">      <span class="attr">android:textAllCaps</span>=<span class="string">"false"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下<br><img src="http://cdn2.snapgram.co/imgs/2016/12/09/2.png" alt="2.png"></p>
</li>
</ul>
<h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>android:textAllCaps 系统自动转换文本为大写  true/false</li>
</ul>
<h4 id="按钮响应-3种"><a href="#按钮响应-3种" class="headerlink" title="按钮响应(3种)"></a>按钮响应(3种)</h4><ul>
<li><p>匿名类注册监听器</p>
<ul>
<li>代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建Button对象 //强制类型转换</span></div><div class="line">Button button = (Button)findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">          <span class="comment">//添加逻辑</span></div><div class="line">      &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>接口方式实现</p>
<ul>
<li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//继承接口</span></div><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.activity_main);</div><div class="line">	<span class="comment">//注册监听器</span></div><div class="line">       Button button = (Button)findViewById(R.id.button);</div><div class="line">       button.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="comment">//根据button id处理不同逻辑</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>&#123;</div><div class="line">       <span class="keyword">switch</span> (view.getId())&#123;</div><div class="line">           <span class="keyword">case</span> R.id.button:</div><div class="line">               <span class="comment">//处理逻辑</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       	&#125;</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>android:onClick 匹配<br>在xml中指定android:onClick 指定的方法名称匹配，签名必须完全相同<br>方法要求：</p>
<ul>
<li>是公共方法  public</li>
<li>具有空返回值 void</li>
<li>以 View 作为唯一参数（这将是之前点击的 View）</li>
</ul>
<ul>
<li><p>代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:onClick="Button_onClick"</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Button_onClick</span><span class="params">(View view)</span></span>&#123;</div><div class="line">    <span class="comment">//处理逻辑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h3><ul>
<li><a href="https://developer.android.com/reference/android/widget/EditText.html" target="_blank" rel="external">EditText</a></li>
<li><p>代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/edit_text"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:hint</span>=<span class="string">"输入文字"</span></div><div class="line">     <span class="attr">android:maxLines</span>=<span class="string">"2"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>效果<br><img src="http://cdn2.snapgram.co/imgs/2016/12/10/ScreenShot_20161210102606.png" alt="ScreenShot_20161210102606.png"></p>
<h4 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h4></li>
<li>android:hint  指定一些提示性文字，再用户未输入时提示。</li>
<li>android:maxLines  输入内容最大占用行数</li>
</ul>
<h4 id="提取输入文本"><a href="#提取输入文本" class="headerlink" title="提取输入文本"></a>提取输入文本</h4><ul>
<li>通过findViewById找到EditText 实例，在处理逻辑中调用EditText.getText方法得到输入内容，再由toString转换为字符串。</li>
<li>代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建EditTExt对象</span></div><div class="line"><span class="keyword">private</span> EditText editText;</div><div class="line"></div><div class="line"><span class="comment">//绑定EditText实例</span></div><div class="line">editText = (EditText)findViewById(R.id.edit_text);</div><div class="line"></div><div class="line"><span class="comment">//提取文本</span></div><div class="line">String inputText = editText.getText().toString();</div><div class="line"><span class="comment">//Toast显示</span></div><div class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>,inputText,Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><ul>
<li>将图片放入drawable-xhdpi文件夹</li>
<li><a href="https://developer.android.com/reference/android/widget/ImageView.html" target="_blank" rel="external">ImageView</a></li>
<li><p>代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/image_view"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:src</span>=<span class="string">"@drawable/img_1"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下<br><img src="http://cdn2.snapgram.co/imgs/2016/12/11/ScreenShot_20161211142408.png" alt="ScreenShot_20161211142408.png"></p>
</li>
</ul>
<h4 id="常用属性-2"><a href="#常用属性-2" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>android:src  引用资源位置</li>
</ul>
<h4 id="更改ImageView图片"><a href="#更改ImageView图片" class="headerlink" title="更改ImageView图片"></a>更改ImageView图片</h4><ul>
<li>调用 imageView.setImageResource()方法</li>
<li>代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ImageView imageView;</div><div class="line"></div><div class="line">imageView = (ImageView)findViewById(R.id.image_view);</div><div class="line"></div><div class="line">imageView.setImageResource(R.drawable.img_2);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h3><ul>
<li><a href="https://developer.android.com/reference/android/widget/ProgressBar.html" target="_blank" rel="external">ProgressBar</a></li>
<li><p>代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/progress_bar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">    <span class="attr">android:max</span>=<span class="string">"100"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><img src="http://cdn4.snapgram.co/images/2016/12/11/ScreenShot_20161211143148.png" alt="ScreenShot_20161211143148.png"></p>
</li>
</ul>
<h4 id="常用属性-3"><a href="#常用属性-3" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>android：visibility 是否可见 取值 visible  invisible  gone</li>
<li>style=”?android:attr/progressBarStyleHorizontal”<br>android:max=”100”<br>设定显示方式为横向进度条，进度条最大值100</li>
</ul>
<h4 id="进度条有关设置"><a href="#进度条有关设置" class="headerlink" title="进度条有关设置"></a>进度条有关设置</h4><ul>
<li><p>显示/隐藏进度条<br>progressBar.setVisibility()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ProgressBar progressBar;</div><div class="line"></div><div class="line">progressBar = (ProgressBar)findViewById(R.id.progress_bar);</div><div class="line"></div><div class="line"><span class="comment">//设置ProgressBar</span></div><div class="line"><span class="keyword">if</span>(progressBar.getVisibility() == View.GONE)&#123;</div><div class="line">	progressBar.setVisibility(View.VISIBLE);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	progressBar.setVisibility(View.GONE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>设置进度条进度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> progress = progressBar.getProgress();</div><div class="line">progress +=<span class="number">10</span>;</div><div class="line">progressBar.setProgress(progress);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h3><ul>
<li><a href="https://developer.android.com/reference/android/app/AlertDialog.html" target="_blank" rel="external">AlertDialog</a></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">AlertDialog.Builder dialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">dialog.setTitle(<span class="string">"This is Dialog"</span>);</div><div class="line">dialog.setMessage(<span class="string">"something important"</span>);</div><div class="line">dialog.setCancelable(<span class="keyword">false</span>);</div><div class="line"><span class="comment">//setPositiveButton设定OK点击事件</span></div><div class="line">dialog.setPositiveButton(<span class="string">"OK"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span></span>&#123;</div><div class="line">     &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//setNegativeButton设定Canncel点击事件</span></div><div class="line">dialog.setNegativeButton(<span class="string">"Canncel"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span></span>&#123;</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//显示 AlertDialog</span></div><div class="line">dialog.show();</div></pre></td></tr></table></figure>
</li>
<li><p><img src="http://cdn1.snapgram.co/imgs/2016/12/11/ScreenShot_20161211195720.png" alt="ScreenShot_20161211195720.png"></p>
</li>
</ul>
<h3 id="ProgressDialog"><a href="#ProgressDialog" class="headerlink" title="ProgressDialog"></a>ProgressDialog</h3><ul>
<li><a href="https://developer.android.com/reference/android/app/ProgressDialog.html" target="_blank" rel="external">ProgressDialog</a>与AlertDialog类似，但是会额外显示一个进度条</li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建ProgressDialog对象</span></div><div class="line">ProgressDialog progressDialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line"><span class="comment">//设置标题</span></div><div class="line">progressDialog.setTitle(<span class="string">"This is ProgressDialog"</span>);</div><div class="line"><span class="comment">//设置内容</span></div><div class="line">progressDialog.setMessage(<span class="string">"Loading..."</span>);</div><div class="line"><span class="comment">//是否可以返回键取消</span></div><div class="line">progressDialog.setCancelable(<span class="keyword">false</span>);</div><div class="line"><span class="comment">//显示</span></div><div class="line">progressDialog.show();</div></pre></td></tr></table></figure>
</li>
<li><p>效果如图<br><img src="http://cdn4.snapgram.co/images/2016/12/11/ScreenShot_20161211200629.png" alt="ScreenShot_20161211200629.png"></p>
</li>
<li><p><code>PS：progressDialog.setCancelable();属性设置为false时表示ProgressDialog无法通过Back键取消。只能通过progressDialog.dismiss()方法取消</code></p>
</li>
</ul>
<h2 id="四种基本布局"><a href="#四种基本布局" class="headerlink" title="四种基本布局"></a>四种基本布局</h2><h3 id="LinearLayout-线性布局"><a href="#LinearLayout-线性布局" class="headerlink" title="LinearLayout 线性布局"></a>LinearLayout 线性布局</h3><ul>
<li>线性方向上依次排列</li>
<li>基础效果如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"ljy.com.uilayouttest.MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button_1"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_2"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button_2"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_3"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button_3"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h4><ul>
<li>android：orientation     LinearLayout 的排列方向，取值有两种 horizontal横向和vertical竖向，不指定 android：orientation时，默认 horizontal</li>
<li>android:layout<em>gravity  </em>指定控件在布局中的对齐方式。该属性与 LinearLayout 的排列方向有很大关系。</li>
<li><p>android:layout<em>weight    </em>允许使用比例方式指定控件大小,计算控件大小时，系统非将所有控件的android:layout<em>weight  </em>值相加，当作基底，计算指定的大小比例</p>
<ul>
<li><p>EditText和Button<br>常见用法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:hint</span>=<span class="string">"Button_1"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/button_2"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Button_2"</span>/&gt;</div></pre></td></tr></table></figure>
<p><img src="http://cdn1.snapgram.co/imgs/2016/12/13/ScreenShot_20161213100420.png" alt="ScreenShot_20161213100420.png"><br>指定android:layout<em>width   </em>为0dp，android:layout<em>weight=”1”均为1 </em>平分大小</p>
</li>
<li><p>另一种用法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:hint</span>=<span class="string">"Button_1"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/button_2"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Button_2"</span>/&gt;</div></pre></td></tr></table></figure>
<p>将Button的android:layout_width设定为wrap_content，EditText 的android:layout<em>weight=”1”，EditText会占满整个屏幕剩余部分，在适配屏幕时较常用</em></p>
</li>
</ul>
</li>
</ul>
<h3 id="RelativeLayout相对布局"><a href="#RelativeLayout相对布局" class="headerlink" title="RelativeLayout相对布局"></a>RelativeLayout相对布局</h3><ul>
<li>属性较多，以代码形式说明<h4 id="相对父布局位置"><a href="#相对父布局位置" class="headerlink" title="相对父布局位置"></a>相对父布局位置</h4></li>
<li><p>代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"ljy.com.uilayouttest.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 1"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_2"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 2"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_3"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 3"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_4"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 4"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_5"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 5"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><img src="http://cdn3.snapgram.co/imgs/2016/12/13/ScreenShot_20161213102007.png" alt="ScreenShot_20161213102007.png"></p>
</li>
<li>android:layout_alignParentLeft=”true”<br>android:layout_alignParentTop=”true”<br>android:layout_centerInParent=”true”<br>android:layout_alignParentBottom=”true”<br>android:layout<em>alignParentRight=”true”
</em>简而言之这些属性指定了控件相对父布局的位置</li>
</ul>
<h4 id="相对控件位置"><a href="#相对控件位置" class="headerlink" title="相对控件位置"></a>相对控件位置</h4><ul>
<li><p>代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"ljy.com.uilayouttest.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_3"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 3"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_above</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 1"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_2"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_above</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 2"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_4"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_below</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 4"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button_5"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_below</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/button_3"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button 5"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><img src="http://cdn4.snapgram.co/images/2016/12/13/ScreenShot_20161213103016.png" alt="ScreenShot_20161213103016.png"></p>
</li>
<li><p>说明</p>
<ul>
<li>android:layout_above 可以指定一个控件位于指定控件的上方，需要指定ID引用</li>
<li>android:layout_below 指定一个控件位于指定控件的下方，id引用</li>
<li>android:layout_toLeftOf 指定一个控件位于指定控件的左侧，id引用</li>
<li>android:layout_toRightOf 指定一个控件位于指定控件的右侧，id引用。</li>
</ul>
</li>
<li><p><strong>NOTE：当控件去引用另一个控件的ID时，引用控件一定要在前</strong>本例中是id/button<em>3在最前面</em></p>
</li>
</ul>
<h3 id="FrameLayout帧布局"><a href="#FrameLayout帧布局" class="headerlink" title="FrameLayout帧布局"></a>FrameLayout帧布局</h3><ul>
<li>所有控件默认左上角</li>
<li><p>代码如下<br>两个控件重合</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span>  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"TextView"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/image_view"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://cdn2.snapgram.co/imgs/2016/12/13/ScreenShot_20161213113149.png" alt="ScreenShot_20161213113149.png"></p>
</li>
<li><p>android:layout<em>gravity  </em>同样可以应用于FrameLayout中，指定对齐方式</p>
</li>
</ul>
<h3 id="PercentFrameLayout百分比布局"><a href="#PercentFrameLayout百分比布局" class="headerlink" title="PercentFrameLayout百分比布局"></a>PercentFrameLayout百分比布局</h3><ul>
<li>PercentFrameLayout并非内置于系统SDK中，使用前要在build.gradle中添加百分比布局的依赖。</li>
<li><p>修改app/build.gradle文件，在dependencies闭包中增加依赖。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">  <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">      exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">  &#125;)</div><div class="line">  compile 'com.android.support:appcompat-v7:25.0.1'</div><div class="line">  <span class="comment">//下面一行为增加内容，要与上面的版本号保持一致</span></div><div class="line">  compile 'com.android.support:percent:25.0.1'</div><div class="line">  testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完成后，as会开始同步，同步完成即可。</p>
</li>
</ul>
<ul>
<li>PercentFrameLayout继承了FrameLayout的特性，所有控件默认左上角，需要通过android:layout<em>gravity </em>来调整位置</li>
<li><p>源码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># PercentFrameLayout 并非系统内置SDK，需要声明完整包路径</div><div class="line"><span class="tag">&lt;<span class="name">android.support.percent.PercentFrameLayout</span></span></div><div class="line"># 随后定义<span class="attr">app</span>的命名空间</div><div class="line">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button1"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button1"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"left|top"</span></div><div class="line">      <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">      <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button2"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button2"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"right|top"</span></div><div class="line">      <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">      <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button3"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button3"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"left|bottom"</span></div><div class="line">      <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">      <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/button4"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Button4"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"right|bottom"</span></div><div class="line">      <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">      <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.percent.PercentFrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>效果如图<br><img src="http://cdn4.snapgram.co/images/2016/12/13/ScreenShot_20161213145134.png" alt="ScreenShot_20161213145134.png"></p>
</li>
<li><p>与之类似的还有 PercentRelativeLayout，用法不加累赘</p>
</li>
</ul>
<h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><h3 id="引入布局"><a href="#引入布局" class="headerlink" title="引入布局"></a>引入布局</h3><ul>
<li><p>新建title.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:background</span>=<span class="string">"@drawable/title_bg"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/title_back"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"@drawable/back_bg"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Back"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"#fff"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/title_text"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Title Text"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"24sp"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/title_edit"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"@drawable/edit_bg"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"Edit"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"#fff"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在activity<em>main.xml  </em>中使用title.xml<br> <code>&lt;include layout=&quot;@layout/title&quot;/&gt;</code>   </p>
</li>
<li><p>隐藏系统自带标题栏,在mainActivity的onCreat中添加如下代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  ActionBar actionBar = getSupportActionBar();</div><div class="line"><span class="keyword">if</span> (actionBar != <span class="keyword">null</span>)</div><div class="line">    actionBar.hide();</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下<br><img src="http://cdn2.snapgram.co/imgs/2016/12/13/ScreenShot_20161213182554.png" alt="ScreenShot_20161213182554.png"></p>
<h3 id="自定义控件-1"><a href="#自定义控件-1" class="headerlink" title="自定义控件"></a>自定义控件</h3><ul>
<li>创建TitleLayout继承自LinearLayout ，代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"><span class="comment">//构造函数</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">TitleLayout</span><span class="params">(Context context, AttributeSet attributeSet)</span></span>&#123;</div><div class="line">     <span class="keyword">super</span>(context,attributeSet);</div><div class="line">     <span class="comment">//调用LayoutInflater.from方法构建LayoutInflater对象，</span></div><div class="line">     <span class="comment">//再调用inflate加载布局文件</span></div><div class="line">     LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>再activity<em>main.xml  </em>中 添加自定义控件,<br><strong>添加自定义控件时要指明控件的完整类名</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ljy.com.uicustomviews.TitleLayout</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>效果与引入布局文件相同</p>
</li>
</ul>
<h4 id="注册按钮点击事件"><a href="#注册按钮点击事件" class="headerlink" title="注册按钮点击事件"></a>注册按钮点击事件</h4><ul>
<li>在TitleLayout的构造函数添加按钮注册点击事件<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Button titleBack = (Button)findViewById(R.id.title_back);</div><div class="line">Button titleEdit = (Button)findViewById(R.id.title_edit);</div><div class="line">titleBack.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">             <span class="comment">//模拟返回键</span></div><div class="line">             ((Activity)getContext()).finish();</div><div class="line">         &#125;</div><div class="line">     &#125;);</div><div class="line"></div><div class="line">     titleEdit.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">             <span class="comment">//Toast通知</span></div><div class="line">             Toast.makeText(getContext(),<span class="string">"clik"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">         &#125;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;资料来源如下&lt;/li&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常用控件&quot;&gt;&lt;a href=&quot;#常用控件&quot; class=&quot;headerlink&quot; title=&quot;常用控件&quot;&gt;&lt;/a&gt;常用控件&lt;/h2&gt;&lt;h3 id=&quot;
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—Activity</title>
    <link href="http://yoursite.com/2016/12/07/Android%E7%AC%94%E8%AE%B0-Activity/"/>
    <id>http://yoursite.com/2016/12/07/Android笔记-Activity/</id>
    <published>2016-12-07T04:00:00.000Z</published>
    <updated>2016-12-14T08:23:03.094Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ul>
<li>资料来源如下</li>
<li>第一行代码(第二版)</li>
</ul>
<hr>
<h2 id="Activity基础"><a href="#Activity基础" class="headerlink" title="Activity基础"></a>Activity基础</h2><h3 id="Activity定义"><a href="#Activity定义" class="headerlink" title="Activity定义"></a>Activity定义</h3><ul>
<li>Activity 是Android四大组件之一，用户可与其提供的屏幕进行交互，以执行操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口可以充满屏幕，也可浮动。应用通常由多个彼此联系的 Activity 组成。应用中的某个 Activity 为“主”Activity，即首次启动应用时的Activity。</li>
</ul>
<h3 id="创建Activity"><a href="#创建Activity" class="headerlink" title="创建Activity"></a>创建Activity</h3><ul>
<li><p>新建FirstAtivity继承自AppCompatActivity</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">&#125; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建加载布局<br>  <a href="http://snapgr.am/image/LoY4" target="_blank" rel="external"><img src="http://cdn2.snapgram.co/imgs/2016/07/20/1.jpg" alt="1.jpg"></a></p>
</li>
<li><p>切换到first-layout</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  &lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">  &lt;LinearLayout</div><div class="line">  xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">  android:layout_width="match_parent"</div><div class="line">  android:layout_height="match_parent"&gt;</div><div class="line">  &lt;Button</div><div class="line">      android:id="@+id/button_1"</div><div class="line">      android:text="button_1"</div><div class="line">      android:layout_width="wrap_content"</div><div class="line">      android:layout_height="wrap_content" /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在FirestActivity中加载layout<br>  在onCreate中加入</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setContentView(R.layout.first_layout);</div></pre></td></tr></table></figure>
</li>
<li><p>在AndroidMainfest文件中注册。</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">           android:name=".FirstActivity"</div><div class="line">           android:label="This is FirstActivity"&gt;</div><div class="line">           &lt;intent-filter&gt;</div><div class="line">               &lt;action android:name="android.intent.action.MAIN"/&gt;</div><div class="line">               &lt;category android:name="android.intent.category.LAUNCHER"/&gt;</div><div class="line">           &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在模拟器中启动apk<br>  <a href="http://snapgr.am/image/LogP" target="_blank" rel="external"><img src="http://cdn2.snapgram.co/imgs/2016/07/20/5ea429.jpg" alt="5ea429.jpg"></a></p>
</li>
</ul>
<h3 id="使用Toast"><a href="#使用Toast" class="headerlink" title="使用Toast"></a>使用Toast</h3><blockquote>
<p><a href="https://developer.android.com/guide/topics/ui/notifiers/toasts.html#Positioning" target="_blank" rel="external">Toast google官方说明</a></p>
<ul>
<li>推送一个短小信息推送给用户<br>  如图（摘自android developer）<br>  <img src="http://cdn4.snapgram.co/images/2016/07/20/toast.png" alt="toast.png"></li>
</ul>
</blockquote>
<ul>
<li><p>使用方法</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Toast.makeText(context, text, duration).show();</div></pre></td></tr></table></figure>
<p>  举例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Toast.makeText(FirstActivity.<span class="keyword">this</span>, <span class="string">"you clicked button 1"</span>, Toast.LENGTH_SHORT).show();</div><div class="line"><span class="comment">/*                  activity.this   消息内容                显示时间设置   */</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用Menu"><a href="#使用Menu" class="headerlink" title="使用Menu"></a>使用Menu</h3><ul>
<li><p>创建菜单</p>
<ul>
<li>在res下新疆menu文件夹，右击menu文件夹—new—Menu resource file，创建main的菜单文件。</li>
<li><p>main.xml中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> &lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span>        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/add_item"</span></div><div class="line">     <span class="attr">android:title</span>=<span class="string">"Add"</span>/&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/remove_item"</span></div><div class="line">     <span class="attr">android:title</span>=<span class="string">"Remove"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里创建了两个菜单项 Add和Remove</p>
</li>
<li><p>在FirestActivity中重写 onCreateOptionsMenu()方法（快捷键 Ctrl+O）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>getMenuInflater()</code>可以得到MenuInflater对象，再调用.inflate就可以创建菜单。.inflat接受俩个参数，一是资源文件名，二是菜单项添加至那个对象中。onCreateOptionsMenu方法中返回true表示创建菜单并显示。</p>
</li>
<li>效果如下。<br><img src="http://cdn2.snapgram.co/imgs/2016/12/07/Screenshot_1481113497.png" alt="Screenshot_1481113497.png"></li>
</ul>
</li>
<li><p>创建菜单点击响应事件</p>
<ul>
<li><p>重写onOptionsItemSelected方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">   <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">       <span class="keyword">case</span> R.id.add_item:</div><div class="line">           Toast.makeText(<span class="keyword">this</span>, <span class="string">"Add"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> R.id.remove_item:</div><div class="line">           Toast.makeText(<span class="keyword">this</span>, <span class="string">"Remove"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">default</span>:</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>通过item.getItemId()判断点击选项，弹出不同的Toast</p>
</li>
</ul>
</li>
</ul>
<h3 id="向一个activity-并传递字符串"><a href="#向一个activity-并传递字符串" class="headerlink" title="向一个activity 并传递字符串"></a>向一个activity 并传递字符串</h3><ul>
<li>构建一个Intent<br>  <code>Intent intent = new Intent(this, DisplayMessageActivity.class);</code><br>  构造方法有两个参数：<br>  Context 是第一个参数，这里使用了this是因为Activity是Context的子类。<br>  Class 类是系统将要分发的APP组件，在这里，这个Activity将会被启动。</li>
</ul>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="comment">// 创建一个新的intent对象，绑定DisplayMessageActivity</span></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DisplayMessageActivity.class);</div><div class="line">    <span class="comment">//创建一个editText对象，绑定xml中editText</span></div><div class="line">    EditText editText = (EditText) findViewById(R.id.edit_message);</div><div class="line">    <span class="comment">//获取editText中输入文字，转成字符串</span></div><div class="line">    String message = editText.getText().toString();</div><div class="line">    <span class="comment">//一个Intent对象可以携带被称为extras的键值对。</span></div><div class="line">    <span class="comment">// putExtra()方法将键放在第一个参数中，将值放在第二个参数中。</span></div><div class="line">    intent.putExtra(EXTRA_MESSAGE, message);</div><div class="line">    <span class="comment">//启动intent对应Activity</span></div><div class="line">    startActivity(intent);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_display_message);</div><div class="line"></div><div class="line">    <span class="comment">//创建本地intent</span></div><div class="line">    Intent intent = getIntent();</div><div class="line">    <span class="comment">//取出String类型数据，如果是Int类型就是getIntExtra，Boolean类型就是getBooleanExtra</span></div><div class="line">    String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);</div><div class="line">    <span class="comment">//显示String</span></div><div class="line">    <span class="comment">//创建新的TextView</span></div><div class="line">    TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//设置文本大小</span></div><div class="line">    textView.setTextSize(<span class="number">40</span>);</div><div class="line">    <span class="comment">//设置显示内容</span></div><div class="line">    textView.setText(message);</div><div class="line">    <span class="comment">//绑定xml</span></div><div class="line">    ViewGroup layout = (ViewGroup) findViewById(R.id.activity_display_message);</div><div class="line">    <span class="comment">//ViewGroup中添加TextView</span></div><div class="line">    layout.addView(textView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="返回数据给上一个Activity"><a href="#返回数据给上一个Activity" class="headerlink" title="返回数据给上一个Activity"></a>返回数据给上一个Activity</h3><ul>
<li><p>构建Intent使用startActivityForResult()方法传入请求码，启动下一个Activity<br>在下一个Activity中构建Intent，intent.putExtra存入键值-key，调用setResult()方法，传入finish()结束掉Activity<br>重写第一个Activity中的onActivityResult()方法，调用.getStringExtra取出key对应键值。</p>
</li>
<li><p>startActivityForResult(Intent, int Bundle) Intent与单纯启动Activity的Intent相同，第二个是请求码，下一级 回调提供相同的请求码，以便您应用可以正确识别结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(FirestActivity.<span class="keyword">this</span>,ScendActivity.class);</div><div class="line">startActivityForResult(intent,<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>setResult()方法，第一个参数向上级方法处理结果，一般使用RESULT_OK或RESULT_CANCELED，第二个参数 对应Intent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建显示Intent</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line"><span class="comment">//存入key-键值</span></div><div class="line">intent.putExtra(<span class="string">"data_return"</span>,<span class="string">"Hello Firest"</span>);</div><div class="line">setResult(RESULT_OK,intent);</div><div class="line"><span class="comment">//结束Activity</span></div><div class="line">finish();</div></pre></td></tr></table></figure>
</li>
<li><p>onActivityResult()三个参数.第一个startActivityForResult() 传递的请求代码。第二个 Activity 指定的结果代码。成功是 RESULT_OK；失败，则是 RESULT_CANCELED。第三个是传送结果数据的 Intent。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode,<span class="keyword">int</span> resultCode,Intent data)</span></span>&#123;</div><div class="line">    <span class="comment">//选择不同请求码对应处理逻辑</span></div><div class="line">    <span class="keyword">switch</span>(requestCode)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="comment">//处理结果时候ok</span></div><div class="line">            <span class="keyword">if</span>(resultCode == RESULT_OK)&#123;</div><div class="line">                <span class="comment">//取出数据</span></div><div class="line">                String returnedData = data.getStringExtra(<span class="string">"data_return"</span>);</div><div class="line">                Log.d(<span class="string">"FirstActivity"</span>, returnedData);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h2><p>  <img src="http://cdn2.snapgram.co/imgs/2016/12/07/basic-lifecycle.png" alt="basic-lifecycle.png"></p>
<ul>
<li>Activity 3种状态<ul>
<li>Resumed/继续<br>Activity 处于前台，且用户可以与其交互</li>
<li>Paused/暂停<br> Activity 被在前台中处于另一个 Activity—部分阻挡。 暂停的 Activity 不会接收用户输入并且无法执行任何代码。</li>
<li>Stopped/停止<br>Activity完全隐藏，对用户完全不可见.当停止时，activity的所有状态信息比如成员变量都会被保留，但是不能再执行任何代码</li>
</ul>
</li>
</ul>
<h3 id="启动一个Activity"><a href="#启动一个Activity" class="headerlink" title="启动一个Activity"></a>启动一个Activity</h3><ul>
<li>onCreate方法</li>
<li><p>主Activity：</p>
<ul>
<li>用户点击app图标，启动主Activity</li>
<li>在AndroidManifest.xml中声明<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过调用onCreate方法创建一个Activity实例，onCreate方法在Activity的整个生命周期中只执行一次。</p>
</li>
<li>之后系统会很快的调用onStart和onResume方法，Activity进入Resumed/继续模式。直到被其他activity覆盖/屏幕关闭。<h3 id="销毁Activity"><a href="#销毁Activity" class="headerlink" title="销毁Activity"></a>销毁Activity</h3></li>
<li>onDestory方法<br>大多数的APP不需要实现这个方法，因为本地类引用会随着Activity一起总结，不过Activity的清理工作应该放在onPause下或者onStop。       </li>
<li>Note:<br>在所有的情况下系统调用onDestory方法之后已经调用过onPause方法与onStop方法，不过有一个例外情况：你在onCreate方法中调用了finish方法。在一些例子中，当你的Activity临时决定要启动另一个Activity，你可能要在onCreate方法内调用finish方法来销毁这个Activity，在这种情况下，系统会立即调用onDestory方法，而不会调用其它任何生命周期方法。</li>
</ul>
<h3 id="暂停Activity"><a href="#暂停Activity" class="headerlink" title="暂停Activity"></a>暂停Activity</h3><ul>
<li>onPause()方法</li>
<li><p>Activity被其他Activity覆盖/失去用户焦点，系统调用onPause()方法，Activity 进入暂停状态。</p>
<ul>
<li>note：android7.0及以上版本加入了多窗口模式，当Activity失去用户焦点时，可能处于多窗口模式。</li>
<li><p>onPause() 常用回调：</p>
<ul>
<li>检查 Activity 是否可见。不可见则停止可能消耗 CPU 的操作</li>
<li>提交未保存的更改，仅保存用户离开时希望永久性保存此类更改（比如电子邮件草稿）。</li>
<li>释放系统资源，GPS/Camer等</li>
<li><p>示例 (释放Camer)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onPause();  <span class="comment">// Always call the superclass method first</span></div><div class="line"></div><div class="line"><span class="comment">// Release the Camera because we don't need it when paused</span></div><div class="line"><span class="comment">// and other activities might need to use it.</span></div><div class="line"><span class="keyword">if</span> (mCamera != <span class="keyword">null</span>) &#123;</div><div class="line">   mCamera.release();</div><div class="line">   mCamera = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注意事项：</p>
<ul>
<li>在onPause()一般不执行永久性存储用户更改，不执行 CPU 密集型工作，这些工作一般放在onStop() 。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="继续-Activity"><a href="#继续-Activity" class="headerlink" title="继续 Activity"></a>继续 Activity</h3><ul>
<li>onResume() 方法</li>
<li>暂停状态回到继续状态，Activity第一次启动时也会调用这个方法。</li>
<li>onResume() 以初始化在 onPause() 期间释放的组件。</li>
<li>示例(重新获取Camera)<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">super</span>.onResume();  <span class="comment">// Always call the superclass method first</span></div><div class="line"></div><div class="line">  <span class="comment">// Get the Camera instance as the activity achieves full user focus</span></div><div class="line">  <span class="keyword">if</span> (mCamera == <span class="keyword">null</span>) &#123;</div><div class="line">      initializeCamera(); <span class="comment">// Local method to handle camera init</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="停止-Activity"><a href="#停止-Activity" class="headerlink" title="停止 Activity"></a>停止 Activity</h3><ul>
<li>note：<br>大多数相对简单的 Activity 而言，系统在 Activity 停止时会将Activity 实例保留在系统内存中，无需实现 onStop() 和 onRestart() 或甚至onStart() 方法。可能只需使用 onPause() 暂停正在进行的操作，并从系统资源断开连接。</li>
</ul>
<ul>
<li>onStop() 方法</li>
<li><p>场景：</p>
<ul>
<li>用户在最近应用切换到另一个应用</li>
<li>应用中执行开始新 Activity 的操作</li>
<li>Activity使用时，接打电话</li>
</ul>
</li>
<li><p>调用时，Activity不再可见，释放几乎所有用户不使用时不需要的资源。如果系统内存紧张，则可能销毁内存中的Acitivity实例。</p>
</li>
<li>onStop() 方法调用后，Activity不再可见，极端情况下，系统可能会仅终止应用进程，而不调用 onDestroy() ，因此需要使用 onStop() 释放几乎所有用户不使用时不需要的资源。</li>
<li>尽管 onPause() 方法在 onStop()之前调用，在onStop() 执行更大、占用更多 CPU 的关闭操作，比如向数据库写入信息</li>
<li>示例（草稿笔记内容保存在永久存储）<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">super</span>.onStop();  <span class="comment">// Always call the superclass method first</span></div><div class="line"></div><div class="line">  <span class="comment">// Save the note's current draft, because the activity is stopping</span></div><div class="line">  <span class="comment">// and we want to be sure the current note progress isn't lost.</span></div><div class="line">  ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">  values.put(NotePad.Notes.COLUMN_NAME_NOTE, getCurrentNoteText());</div><div class="line">  values.put(NotePad.Notes.COLUMN_NAME_TITLE, getCurrentNoteTitle());</div><div class="line"></div><div class="line">  getContentResolver().update(</div><div class="line">  mUri,    <span class="comment">// The URI for the note to update.</span></div><div class="line">  values,  <span class="comment">// The map of column names and new values to apply to them.</span></div><div class="line">   <span class="keyword">null</span>,    <span class="comment">// No SELECT criteria are used.</span></div><div class="line">   <span class="keyword">null</span>     <span class="comment">// No WHERE columns are used.</span></div><div class="line">   );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="启动-重启-Activity"><a href="#启动-重启-Activity" class="headerlink" title="启动/重启 Activity"></a>启动/重启 Activity</h3><ul>
<li>onStart() 方法</li>
<li>Activity 停止转换为继续状态时，系统回调onRestart() 方法+ onStart() 方法.onStop() 方法清理了所有 Activity 的资源，重启 Activity 需要重新实例化它们。同时 Activity 初次创建时重新实例化它们。 出于此，经常使用 onStart() 方法作为 onStop() 方法的对应</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onStart();  <span class="comment">// Always call the superclass method first</span></div><div class="line"></div><div class="line">   <span class="comment">// The activity is either being restarted or started for the first time</span></div><div class="line">   <span class="comment">// so this is where we should make sure that GPS is enabled</span></div><div class="line">   LocationManager locationManager =</div><div class="line">    (LocationManager) getSystemService(Context.LOCATION_SERVICE);</div><div class="line">   <span class="keyword">boolean</span> gpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (!gpsEnabled) &#123;</div><div class="line">    <span class="comment">// Create a dialog here that requests the user to enable GPS, and use an intent</span></div><div class="line">    <span class="comment">// with the android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS action</span></div><div class="line">    <span class="comment">// to take the user to the Settings screen to enable GPS when they click "OK"</span></div><div class="line">   	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onRestart();  <span class="comment">// Always call the superclass method first</span></div><div class="line"></div><div class="line">   <span class="comment">// Activity being restarted from stopped state</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="保存-Activity-状态"><a href="#保存-Activity-状态" class="headerlink" title="保存 Activity 状态"></a>保存 Activity 状态</h3><ul>
<li>onSaveInstanceState()方法</li>
<li>默认情况下，Activity 实例被销毁时系统会使用 Bundle 实例状态保存 Activity 布局中有关每个 View 对象的信息。在Activity 重建时，布局状态便自动恢复先前的状态。 </li>
<li>默认实现保存有关 Activity 视图层次的状态信息，例如 EditText 小部件中的文本或ListView 的滚动位置</li>
<li>要恢复的更多信息，需要重写 onSaveInstanceState()方法，将键值对添加至 Bundle 对象</li>
<li><img src="http://cdn4.snapgram.co/images/2016/11/18/basic-lifecycle-savestate.png" alt="basic-lifecycle-savestate.png"></li>
</ul>
<ul>
<li>note:<br>旋转屏幕时，Activity 将被销毁并重新创建。原因：方向更改时可能需要时加载备用资源（比如布局）</li>
</ul>
<ul>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String STATE_SCORE = <span class="string">"playerScore"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String STATE_LEVEL = <span class="string">"playerLevel"</span>;</div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">  <span class="comment">// Save the user's current game state</span></div><div class="line">   savedInstanceState.putInt(STATE_SCORE, mCurrentScore);</div><div class="line">   savedInstanceState.putInt(STATE_LEVEL, mCurrentLevel);</div><div class="line"></div><div class="line">   <span class="comment">// Always call the superclass so it can save the view hierarchy state</span></div><div class="line">   <span class="keyword">super</span>.onSaveInstanceState(savedInstanceState);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="恢复-Activity"><a href="#恢复-Activity" class="headerlink" title="恢复 Activity"></a>恢复 Activity</h3><ul>
<li>onCreate() 和 onRestoreInstanceState() 回调方法均接收包含实例状态信息的相同 Bundle</li>
<li>onCreate() 方法</li>
<li>调用onCreate() 方法需要区分是创建 Activity 的新实例还是恢复先前的实例，判断 Bundle 是否为 null</li>
<li><p>示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState); <span class="comment">// Always call the superclass first</span></div><div class="line"></div><div class="line">   <span class="comment">// Check whether we're recreating a previously destroyed instance</span></div><div class="line">   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="comment">// Restore value of members from saved state</span></div><div class="line">       mCurrentScore = savedInstanceState.getInt(STATE_SCORE);</div><div class="line">       mCurrentLevel = savedInstanceState.getInt(STATE_LEVEL);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="comment">// Probably initialize members with default values for a new instance</span></div><div class="line">  	 &#125;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>onRestoreInstanceState()方法</p>
</li>
<li>只需要恢复的已保存的状态</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="comment">// Always call the superclass so it can restore the view hierarchy</span></div><div class="line">   <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</div><div class="line"></div><div class="line">   <span class="comment">// Restore state members from saved instance</span></div><div class="line">   mCurrentScore = savedInstanceState.getInt(STATE_SCORE);</div><div class="line">   mCurrentLevel = savedInstanceState.getInt(STATE_LEVEL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="重启Activity其他选择"><a href="#重启Activity其他选择" class="headerlink" title="重启Activity其他选择"></a>重启Activity其他选择</h3><ul>
<li><a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">官方说明</a></li>
<li>重启应用并恢复大量数据不仅成本高昂，而且会留下糟糕的使用体验，有两个其他选择<h4 id="在配置变更期间保留对象"><a href="#在配置变更期间保留对象" class="headerlink" title="在配置变更期间保留对象"></a>在配置变更期间保留对象</h4></li>
<li>Activity 因配置变更而重启，则可通过保留 Fragment 来减轻重新初始化 Activity 的负担</li>
<li>当 Android 系统因配置变更而关闭 Activity 时，不会销毁已标记为要保留的 Activity 的片段。 您可以将此类片段添加到 Activity 以保留有状态的对象。</li>
</ul>
<h2 id="Activity最佳实践"><a href="#Activity最佳实践" class="headerlink" title="Activity最佳实践"></a>Activity最佳实践</h2><h3 id="知晓当前运行的活动"><a href="#知晓当前运行的活动" class="headerlink" title="知晓当前运行的活动"></a>知晓当前运行的活动</h3><ul>
<li><p>自定义BaseActivity继承自AppCompatActivity<br>重写onCreate方法，打印当前运行的Activity名<br>app类所有Activity改为继承BaseActivity</p>
</li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      <span class="comment">//打印当前类名</span></div><div class="line">      Log.d(<span class="string">"BaseActivity"</span>, getClass().getSimpleName())；</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下<br><img src="http://cdn2.snapgram.co/imgs/2016/12/08/ScreenShot_20161208172740.png" alt="ScreenShot_20161208172740.png"></p>
</li>
</ul>
<h3 id="随时退出程序"><a href="#随时退出程序" class="headerlink" title="随时退出程序"></a>随时退出程序</h3><ul>
<li>新建ActivityCollector类作为活动管理器，添加/删除Activity登记,在BaseActivity中添加对应代码。</li>
<li><p>代码如下  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</div><div class="line"><span class="comment">//新建Activity的列表对象</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="comment">//添加Activity进入列表</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">       activities.add(activity);</div><div class="line">   &#125;</div><div class="line"><span class="comment">//在列表中移除Activity</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">       activities.remove(activity);</div><div class="line">   &#125;</div><div class="line"><span class="comment">//for循环列表 结束所有Activity</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">for</span> (Activity activity : activities) &#123;</div><div class="line">           <span class="keyword">if</span> (!activity.isFinishing()) &#123;</div><div class="line">               activity.finish();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>BaseActivity<br>在onCreate()方法中添加</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Activity管理器中添加新的活动</span></div><div class="line">ActivityCollector.addActivity(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>重写onDestroy()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    <span class="comment">//Activity管理器中移除活动</span></div><div class="line">    ActivityCollector.removeActivity(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在任何地方调用finishAll()方法即可。</p>
</li>
</ul>
<h3 id="启动活动的最近写法"><a href="#启动活动的最近写法" class="headerlink" title="启动活动的最近写法"></a>启动活动的最近写法</h3><ul>
<li>启动下一个Activity并传递数据模块化</li>
<li><p>在SecondActivity内增加actionStart()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//调用的Activity，数据1，数据2</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, String data1, String data2)</span></span>&#123;</div><div class="line">    <span class="comment">//新建Intent，绑定SecondActivity</span></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(context,ScendActivity.class);</div><div class="line">    <span class="comment">//存入data1，data2</span></div><div class="line">    intent.putExtra(<span class="string">"param1"</span>,data1);</div><div class="line">    intent.putExtra(<span class="string">"param2"</span>,data2);</div><div class="line">    <span class="comment">//启动Activity</span></div><div class="line">    context.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>启动SecondActivity方式<br><code>ScendActivity.actionStart(FirestActivity.this,&quot;data1&quot;,&quot;data2&quot;);</code>  </p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;资料来源如下&lt;/li&gt;
&lt;li&gt;第一行代码(第二版)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Activity基础&quot;&gt;&lt;a href=&quot;#Activity基础&quot; class=&quot;headerlink&quot; title=&quot;Activity基础&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>初入树莓派2---初始化+远程桌面</title>
    <link href="http://yoursite.com/2016/11/27/%E5%88%9D%E5%85%A5%E6%A0%91%E8%8E%93%E6%B4%BE2----%E5%B8%B8%E8%A7%84%E5%88%9D%E5%A7%8B%E5%8C%96+%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/11/27/初入树莓派2----常规初始化+远程桌面/</id>
    <published>2016-11-27T02:17:11.000Z</published>
    <updated>2016-11-27T11:05:48.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="启用树莓派root用户"><a href="#启用树莓派root用户" class="headerlink" title="启用树莓派root用户"></a>启用树莓派root用户</h3><ul>
<li>不做物联网终端时启用root用户比较方便</li>
<li>SSH连接树莓派</li>
<li><p>在命令行下执行</p>
<ul>
<li><p>启用root用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd root</div></pre></td></tr></table></figure>
</li>
<li><p>执行后输入两遍你要设定的root密码</p>
</li>
<li>在输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd –unlock root</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>root用户解锁完成</p>
</li>
<li><p>执行完毕后依旧无法登陆</p>
<ul>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
</li>
<li><p>找到<code>PermitRootLogin without-password</code><br> 改为<code>PermitRootLogin yes</code></p>
</li>
<li>Ctrl + X 、 Y 、 回车 保存</li>
<li><code>sudo reboot</code></li>
</ul>
</li>
</ul>
<h3 id="更换国内镜像地址"><a href="#更换国内镜像地址" class="headerlink" title="更换国内镜像地址"></a>更换国内镜像地址</h3><hr>
<h2 id="gt-http-blog-lxx1-com-2040"><a href="#gt-http-blog-lxx1-com-2040" class="headerlink" title="&gt; http://blog.lxx1.com/2040"></a>&gt; <a href="http://blog.lxx1.com/2040" target="_blank" rel="external">http://blog.lxx1.com/2040</a></h2><ul>
<li>由于众所周知的原因，树莓派链接官方更新源实在太过缓慢，国内有一批不错的镜像地址，可以解决系统/软件更新问题。</li>
<li><p>收集的树莓派镜像一般使用比较频繁的有下面几个<br>1.<a href="http://mirrors.aliyun.com/" target="_blank" rel="external">阿里云</a>  首推镜像地址，移动/联通/电信网络都有不错的访问速度。<br>2.<a href="http://mirrors.neusoft.edu.cn/raspbian/raspbian/" target="_blank" rel="external">大连东软信息学院</a>  北方用户比较友好<br>3.<a href="http://mirrors.ustc.edu.cn/raspbian/raspbian/" target="_blank" rel="external">中国科学技术大学</a>  教育网有加成，非教育网就慢多了</p>
</li>
<li><p>这里选择 阿里云的镜像</p>
</li>
</ul>
<ul>
<li><p>更新 sources.list</p>
<ul>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/apt/sources.list</div></pre></td></tr></table></figure>
</li>
<li><p>删除官方内容或者用#注释掉，添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib</div><div class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除raspi.list备用更新源(可选)</p>
<ul>
<li>通常更新sources.list后依旧缓慢，大多是raspi.list的锅</li>
<li><code>rm /etc/apt/sources.list.d/raspi.list</code>    </li>
</ul>
</li>
</ul>
<h3 id="设置中文字体"><a href="#设置中文字体" class="headerlink" title="设置中文字体"></a>设置中文字体</h3><ul>
<li><p>系统中缺少中文字库 首先更新字库和输入法</p>
<ul>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ttf-wqy-zenhei</div><div class="line">sudo apt-get install scim-pinyin</div></pre></td></tr></table></figure>
</li>
<li><p>接下来 都点 y</p>
</li>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure>
</li>
<li><p>选择change_locale</p>
</li>
<li><img src="http://cdn2.snapgram.co/imgs/2016/11/27/950743-20160520171916373-887591767.png" alt="950743-20160520171916373-887591767.png"><br>空格键在前面打勾或去掉勾（星号=勾） Tab选择OK</li>
<li>去掉en_GB.UTF-8 UTF-8<br>勾选：”en_US.UTF-8 UTF-8”、”zh_CN.UTF-8 UTF-8”、”zh_CN.GBK GBK”</li>
<li>OK，下一屏幕,</li>
<li><img src="http://cdn1.snapgram.co/imgs/2016/11/27/950743-20160520171919435-1542955508.png" alt="950743-20160520171919435-1542955508.png"><br>默认语言选zh_CN.UTF-8</li>
</ul>
</li>
</ul>
<h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><ul>
<li><p>终端执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install xrdp</div></pre></td></tr></table></figure>
</li>
<li><p>windows端 CMD 执行  <code>mstsc</code></p>
</li>
<li>输入树莓派ip地址 用户名 密码 </li>
<li><a href="http://snapgr.am/image/L7lS" target="_blank" rel="external"><img src="http://cdn4.snapgram.co/images/2016/11/27/950743-20160520171926529-1842218984.png" alt="950743-20160520171926529-1842218984.png"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;h3 id=&quot;启用树莓派root用户&quot;&gt;&lt;a href=&quot;#启用树莓派root用户&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>GitHub-Pages更新导致Next主题-博客主页空白，解决方案</title>
    <link href="http://yoursite.com/2016/11/08/GitHub-Pages%E6%9B%B4%E6%96%B0%E5%AF%BC%E8%87%B4Next%E4%B8%BB%E9%A2%98-%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%A9%BA%E7%99%BD%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2016/11/08/GitHub-Pages更新导致Next主题-博客主页空白，解决方案/</id>
    <published>2016-11-08T02:10:11.000Z</published>
    <updated>2016-11-09T10:59:05.509Z</updated>
    
    <content type="html"><![CDATA[<p><strong>倒腾了俩小时，以为梯子坏了，结果。。。GitHub-Pages更新了！！！</strong> </p>
<hr>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul>
<li>GitHub-Pages更新，  过滤掉了 source/vendors 目录的访问。</li>
<li><a href="https://github.com/iissnan/hexo-theme-next/issues/1214" target="_blank" rel="external">issues入口</a></li>
</ul>
<h3 id="解决1更新主题"><a href="#解决1更新主题" class="headerlink" title="解决1更新主题"></a>解决1更新主题</h3><ul>
<li>作者更新了到最新的master分支，解决了这个问题，<br>  So：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="解决2更新本地设置（Next最新版）"><a href="#解决2更新本地设置（Next最新版）" class="headerlink" title="解决2更新本地设置（Next最新版）"></a>解决2更新本地设置（Next最新版）</h3><ul>
<li>将 source/vendors 目录修改成 source/lib （或者其他的名称，只是 lib 我测试了可以使用）；同时，修改下主题配置文件_config.yml， 将 _internal: vendors 改成你所修改的名字，例如  _internal: lib。</li>
</ul>
<h3 id="解决3更新本地设置（Next5-0及以下版本）"><a href="#解决3更新本地设置（Next5-0及以下版本）" class="headerlink" title="解决3更新本地设置（Next5.0及以下版本）"></a>解决3更新本地设置（Next5.0及以下版本）</h3><ul>
<li>将 source/vendors 目录修改成 source/lib （或者其他的名称，只是 lib 我测试了可以使用）；同时，修改下主题配置文件_config.yml， <strong>vendors: vendors </strong>改成你所修改的名字，例如  _internal: lib。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;倒腾了俩小时，以为梯子坏了，结果。。。GitHub-Pages更新了！！！&lt;/strong&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;ul&gt;

    
    </summary>
    
      <category term="点滴" scheme="http://yoursite.com/categories/%E7%82%B9%E6%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>自建DNS服务器(dnsmasq)，对抗DNS污染</title>
    <link href="http://yoursite.com/2016/10/09/%E8%87%AA%E5%BB%BADNS%E8%A7%A3%E5%86%B3%E8%BF%90%E8%90%A5%E5%95%86DNS%E6%B1%A1%E6%9F%93/"/>
    <id>http://yoursite.com/2016/10/09/自建DNS解决运营商DNS污染/</id>
    <published>2016-10-09T04:00:00.000Z</published>
    <updated>2016-11-27T11:06:02.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>学校网络出口劫持严重，上淘宝加返利———-等等等等等等</li>
<li>一直更新hosts不方便，要上google，全平台不好弄</li>
<li>项目组需要</li>
</ul>
<hr>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul>
<li>搭建一个可访问个人公网DNS服务器</li>
<li>提高DNS加载速度</li>
<li>规避运营商的DNS劫持</li>
<li>不影响学校内网访问</li>
<li>简单的能上google</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>一台有公网IP的vps，开放了53端口（<a href="http://tool.chinaz.com/port/" target="_blank" rel="external">端口扫描</a>显示开放了53端口）</li>
<li>装的是linux系统（以    CentOS 6.4 为例）</li>
<li>WinSCP（或其他文件管理）</li>
<li>putty.exe（或者其他SSH登陆工具）</li>
<li>没了。。。。</li>
</ul>
<h3 id="DNSmasq原理和说明"><a href="#DNSmasq原理和说明" class="headerlink" title="DNSmasq原理和说明"></a>DNSmasq原理和说明</h3><ul>
<li>DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。</li>
<li>通过设置DNSmasq的上游DNS地址为无污染DNS来解决运营商的DNS污染。</li>
<li>DNSmasq可以对单独的网址设置DNS服务器。对于学校内网地址设置为学校教育网的DNS解析。对于类似于youtube这种由于DNS污染没法访问的地址，可以先收集无污染的DNS地址，然后交与无污染DNS解析得到正确地址。</li>
<li>DNSmasq再对网址提交上游DNS解析前，可以先通过本地hosts匹配。设置合适hosts可以实现科学上网。</li>
</ul>
<hr>
<p><strong>开始！</strong></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装dnsmasq"><a href="#安装dnsmasq" class="headerlink" title="安装dnsmasq"></a>安装dnsmasq</h4><ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install dnsmasq -y</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置Dnsmasq"><a href="#配置Dnsmasq" class="headerlink" title="配置Dnsmasq"></a>配置Dnsmasq</h4><ul>
<li><p>Dnsmasq的配置文件是 /etc/dnsmasq.conf .通过WinSCP加载修改。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/71ccc79aaa9e" target="_blank" rel="external">dnsmasq.conf设置项说明</a></p>
</li>
<li><p>此次使用的配置如下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> #指定给dnsmasq使用的hosts</div><div class="line"> addn-hosts=/etc/dnsmasq.host</div><div class="line"> #不使用/etc/resolv.conf(VPS默认DNS)来进行上游dns服务器解析需要配置的比较少直接写在dnsmasq.conf文件里了</div><div class="line"> no-resolv</div><div class="line">   </div><div class="line">#上游DNS地址这里为腾讯DNS和中科大DNS</div><div class="line">server=119.29.29.29</div><div class="line">server=202.141.162.123</div><div class="line">server=/google.com/202.141.162.123</div><div class="line">   #这一行是针对学校内网访问，学校内地址使用学校内网DNS。具体地区调整。</div><div class="line">server=/.edu.cn/202.141.162.123</div></pre></td></tr></table></figure>
</li>
<li><p>上游DNS推荐<br>  这里需要在VPS上测试各个DNS后决定。</p>
<ul>
<li>常用靠谱DNS<br>  阿里DNS        223.5.5.5               223.6.6.6<br>  114DNS          114.114.114.114<br>  腾讯DNS        119.29.29.29<br>  V2EX DNS    199.91.73.222       178.79.131.110（访问苹果商店有buff加速）</li>
<li>无污染DNS<br>  目前比较稳定的只有中科大DNS和一些自建的小型DNS。小型DNS通过反带来访问google等，会带来一些隐私和安全风险，还是推荐自建DNS/hosts访问。<br>  中科大DNS<br>  202.38.93.153   （教育网）<br>  202.141.176.93  （中国移动）<br>  202.141.162.123 （中国电信）</li>
<li>其他DNS请自行GOOGLE</li>
</ul>
</li>
<li><p><strong>千万注意！！！</strong> 配置文件中有<strong>listen-address</strong>配置，网络大多数教程中有<code>listen-address=127.0.0.1</code>这是指Dnsmasq只服务于本机的DNS请求。如果需要搭建公网DNS服务，<strong>这个绝对不能有！！</strong></p>
</li>
</ul>
<h4 id="创建-修改-etc-dnsmasq-host文件"><a href="#创建-修改-etc-dnsmasq-host文件" class="headerlink" title="创建/修改/etc/dnsmasq.host文件"></a>创建/修改/etc/dnsmasq.host文件</h4><ul>
<li>一些常用去广告hosts/科学上网hosts的内容，<br>  具体不多说hosts科学上网是一天比一天死的快。没有找到靠谱的地址推荐。自行搜索把！</li>
</ul>
<h4 id="重启Dnsmasq服务"><a href="#重启Dnsmasq服务" class="headerlink" title="重启Dnsmasq服务"></a>重启Dnsmasq服务</h4><ul>
<li><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service dnsmasq restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="测试53端口"><a href="#测试53端口" class="headerlink" title="测试53端口"></a>测试53端口</h4><ul>
<li><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -tunlp|grep 53</div></pre></td></tr></table></figure>
</li>
<li><p>如果正常应该如下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_27_70_centos ~]# netstat -tunlp|grep 53</div><div class="line">tcp        0      0 0.0.0.0:53                  0.0.0.0:*                   LIST                    EN      4226/dnsmasq</div><div class="line">udp        0      0 0.0.0.0:53                  0.0.0.0:*                                                   4226/dnsmasq</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="修改本地DNS地址"><a href="#修改本地DNS地址" class="headerlink" title="修改本地DNS地址"></a>修改本地DNS地址</h4><ul>
<li>这个不多说了，不会的自行google了。。</li>
</ul>
<hr>
<p><strong>结束语</strong><br>创建完了，本地DNS快多了，访问淘宝再也没有了牛皮癣。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote>
<p><a href="http://blog.antior.cn/posts/2015_29.html" target="_blank" rel="external">http://blog.antior.cn/posts/2015_29.html</a><br><a href="http://www.jianshu.com/p/71ccc79aaa9e" target="_blank" rel="external">http://www.jianshu.com/p/71ccc79aaa9e</a><br><a href="http://www.linuxdown.net/install/soft/2016/0520/5566.html" target="_blank" rel="external">http://www.linuxdown.net/install/soft/2016/0520/5566.html</a><br><a href="http://blog.cnwyhx.com/centos-linux-dnsmasq-install-dns/" target="_blank" rel="external">http://blog.cnwyhx.com/centos-linux-dnsmasq-install-dns/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;学校网络出口劫持严重，上淘宝加返利———-等等等等等等&lt;/li&gt;
&lt;li&gt;一直更新hosts不方便，要上google，全平台不好
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Android</title>
    <link href="http://yoursite.com/2016/07/17/Android%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2016/07/17/Android汇总/</id>
    <published>2016-07-17T02:11:11.000Z</published>
    <updated>2016-12-23T14:53:49.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Andorid笔记系列"><a href="#Andorid笔记系列" class="headerlink" title="Andorid笔记系列"></a>Andorid笔记系列</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">更新</div><div class="line"><span class="number">2016.07</span>.<span class="number">20</span>    第一行代码Activity创建部分完成</div><div class="line"><span class="number">2016.07</span>.<span class="number">21</span>    完成添加了button和<span class="keyword">menu</span>部分，对应P39页</div><div class="line"><span class="number">2016.07</span>.<span class="number">22</span>    完成了P55页之前的activity部分。对于activity（二）</div><div class="line"><span class="number">2016.08</span>.<span class="number">10</span>    基本搞定，UI除ListView以外的部分。<span class="number">4</span>种布局比较熟悉，不再折腾。</div><div class="line"><span class="number">2016.08</span>.<span class="number">11</span>    开始ListView部分</div><div class="line"><span class="number">2016.08</span>.<span class="number">14</span>    停更半月</div><div class="line"><span class="number">2016.09</span>.<span class="number">02</span>    恢复更新</div><div class="line"><span class="number">2016.09</span>.<span class="number">03</span>    Broadcast部分开坑。</div><div class="line"><span class="number">2016.09</span>.<span class="number">07</span>    ListView部分除BaseAdapter外完成。BaseAdapter内容，什么时候理解深一点再补上。</div><div class="line"><span class="number">2016.09</span>.<span class="number">13</span>    完成了Broadcast对应部分</div><div class="line"><span class="number">2016.10</span>.<span class="number">03</span>    重新按照google的文档查漏补缺.</div><div class="line"><span class="number">2016.10</span>.<span class="number">03</span>    更名Android笔记，重新开始更新。</div><div class="line"><span class="number">2016.12</span>.<span class="number">05</span>    第二行代码开始！</div><div class="line"><span class="number">2016.12</span>.<span class="number">07</span>    重新整理Android系列笔记，从<span class="number">0</span>整合</div><div class="line"><span class="number">2016.12</span>.<span class="number">08</span>    Activity部分整合完成</div><div class="line"><span class="number">2016.12</span>.<span class="number">13</span>    UI部分基础完成，LIstView部分完成</div><div class="line"><span class="number">2016.12</span>.<span class="number">16</span>    RecycleView部分，基础完成，有待进一步填坑 </div><div class="line"><span class="number">2016.12</span>.<span class="number">22</span>    Fragment完成，有一个占坑</div><div class="line"><span class="number">2016.12</span>.<span class="number">23</span>    Broadcast完成</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Andorid笔记系列&quot;&gt;&lt;a href=&quot;#Andorid笔记系列&quot; class=&quot;headerlink&quot; title=&quot;Andorid笔记系列&quot;&gt;&lt;/a&gt;Andorid笔记系列&lt;/h2&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>单片机课程设计总结</title>
    <link href="http://yoursite.com/2016/07/09/%E5%8D%95%E7%89%87%E6%9C%BA%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/07/09/单片机课程设计总结/</id>
    <published>2016-07-09T12:10:11.000Z</published>
    <updated>2016-07-09T14:59:09.229Z</updated>
    
    <content type="html"><![CDATA[<p>累死人的单片机课程设计终于结束了，忙了两天多。就是个数码管+ADC。看看自己两年多前写的程序。。这感觉。用了一天多重构。。。。之前写程序的那个乱啊。。。重新整理下，自己的库函数。记录于此。</p>
<hr>
<h1 id="1602库函数"><a href="#1602库函数" class="headerlink" title="1602库函数"></a>1602库函数</h1><h2 id="1602-h"><a href="#1602-h" class="headerlink" title="1602.h"></a>1602.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*模 块 名：                LCD1602      */</span></div><div class="line"></div><div class="line"><span class="comment">/*创 建 人：zyy        日期：2014-11-04  */</span></div><div class="line"></div><div class="line"><span class="comment">/*修 改 者：js         日期：2016-07-08	*/</span></div><div class="line"></div><div class="line"><span class="comment">/*版 本2.1	                            */</span></div><div class="line"></div><div class="line"><span class="comment">/*使用方法：首先调用LCD初始化函数void LcdInit()；</span></div><div class="line">  输入一个double类型数据调用void LcdDisplay(double temp);       </div><div class="line">  显示在第二行；如需修改第一行数据可在LcdDisplay函数中修改 */</div><div class="line"><span class="comment">/*  BUG   : 第二行double数据显示最后一位后，会跟随一位乱码 */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stc12c5a60s2.h&gt;      </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrins.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  uint unsigned int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  uchar unsigned char</span></div><div class="line"></div><div class="line">sbit lcdrs = P1^<span class="number">7</span>;</div><div class="line">sbit lcden = P2^<span class="number">4</span>;</div><div class="line">sbit    rw = P1^<span class="number">6</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lcd_data_port P0</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdelay</span><span class="params">(uint s)</span></span>;			 <span class="comment">//通用延迟函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_com</span><span class="params">(uchar com)</span></span>;	     <span class="comment">//并口写数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_data</span><span class="params">(uchar date)</span></span>;	 <span class="comment">//并口写数据</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LcdInit</span><span class="params">()</span></span>;		             <span class="comment">//1602初始化</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LcdDisplay</span><span class="params">(<span class="keyword">double</span> temp,uint t)</span></span>;	 <span class="comment">//显示函数</span></div></pre></td></tr></table></figure>
<h2 id="1602-c"><a href="#1602-c" class="headerlink" title="1602.c"></a>1602.c</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1602.c</span></div><div class="line">include &lt;<span class="number">1602.</span>h&gt;</div><div class="line"></div><div class="line"><span class="comment">/*模 块 名：              LCD1602        */</span></div><div class="line"></div><div class="line"><span class="comment">/*创 建 人：zyy       日期：2014-11-04    */</span></div><div class="line"></div><div class="line"><span class="comment">/*修 改 者：js        日期：2016-07-08	*/</span></div><div class="line"></div><div class="line"><span class="comment">/*版 本2.1	                            */</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**********************************************/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdelay</span><span class="params">(uint s)</span>			   <span class="comment">//通用延迟函数</span></span></div><div class="line">&#123;</div><div class="line">	uint x,y;</div><div class="line">	<span class="keyword">for</span>(x=s;x&gt;<span class="number">0</span>;x--)</div><div class="line">	<span class="keyword">for</span>(y=<span class="number">250</span>;y&gt;<span class="number">0</span>;y--);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**********************************************/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_com</span><span class="params">(uchar com)</span>	   <span class="comment">//并口写数据</span></span></div><div class="line">&#123;</div><div class="line">	lcdrs=<span class="number">0</span>;</div><div class="line">	lcden=<span class="number">0</span>;</div><div class="line">	lcd_data_port=com;</div><div class="line">	sdelay(<span class="number">1</span>);</div><div class="line">	lcden=<span class="number">1</span>;</div><div class="line">	sdelay(<span class="number">1</span>);</div><div class="line">	lcden=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_data</span><span class="params">(uchar date)</span>	   <span class="comment">//并口写数据</span></span></div><div class="line">&#123;</div><div class="line">	lcdrs=<span class="number">1</span>;</div><div class="line">	lcden=<span class="number">0</span>;</div><div class="line">	lcd_data_port=date;</div><div class="line">	sdelay(<span class="number">1</span>);</div><div class="line">	lcden=<span class="number">1</span>;</div><div class="line">	sdelay(<span class="number">1</span>);</div><div class="line">	lcden=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*********************************************************************</span></div><div class="line">*</div><div class="line">* 函 数 名: LcdInit</div><div class="line">* 功能描述: LCD初始化</div><div class="line">* 函数说明: 初始化数据：0x38  0x0c	0x06  0x01</div><div class="line">* 调用函数: sdelay（），write_com（），	write_data（）</div><div class="line">* 输 入: 无</div><div class="line">* 返 回: 无</div><div class="line">* 设 计 者：zyy 日期：2014-12-23</div><div class="line">* 版 本：   1.0</div><div class="line">***********************************************************************/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LcdInit</span><span class="params">()</span>		     <span class="comment">//1602初始化</span></span></div><div class="line">&#123;</div><div class="line">	lcden=<span class="number">0</span>;</div><div class="line">	rw=<span class="number">0</span>;</div><div class="line">	write_com(<span class="number">0x38</span>);</div><div class="line">	write_com(<span class="number">0x0c</span>);</div><div class="line">	write_com(<span class="number">0x06</span>);</div><div class="line">	write_com(<span class="number">0x01</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*********************************************************************</span></div><div class="line">*</div><div class="line">* 函 数 名: LcdDisplay</div><div class="line">* 功能描述: LCD显示</div><div class="line">* 函数说明: double类型数据转化为字符串，在lcd第二行显示。</div><div class="line">* 调用函数: sprintf(),write_com(),sdelay()</div><div class="line">* 全局变量:	无</div><div class="line">* 输 入:    一个double类型变量值</div><div class="line">* 返 回:    无</div><div class="line">* 设 计 者：zyy 日期：2014-12-23</div><div class="line">* 修 改 者：js 日期：2016-07-08</div><div class="line">* 版 本：	2.0</div><div class="line">***********************************************************************/</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LcdDisplay</span><span class="params">(<span class="keyword">double</span> temp,uint t)</span>	       		    <span class="comment">//显示函数</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">static</span> uchar  table0[]=&#123;<span class="string">"pm              "</span>&#125;;		<span class="comment">//1602默认第一行</span></div><div class="line"><span class="keyword">static</span> uchar  table1[]=&#123;<span class="string">"00.0            "</span>&#125;;</div><div class="line"></div><div class="line">uchar  num=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">sprintf</span>(table1,<span class="string">"%f"</span>,(<span class="keyword">double</span>)temp);</div><div class="line"><span class="built_in">sprintf</span>(table1+<span class="number">8</span>,<span class="string">"%2d"</span>,(uint)t);</div><div class="line"></div><div class="line"></div><div class="line">   write_com(<span class="number">0x80</span>);</div><div class="line">	<span class="keyword">for</span>(num=<span class="number">0</span>;num&lt;<span class="number">15</span>;num++)	       <span class="comment">//第一行刷新</span></div><div class="line">	&#123;</div><div class="line">		write_data(table0[num]);</div><div class="line">		sdelay(<span class="number">5</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">   write_com(<span class="number">0x80</span>+<span class="number">0x40</span>);</div><div class="line">    <span class="keyword">for</span>(num=<span class="number">0</span>;num&lt;<span class="number">16</span>;num++)	       <span class="comment">//第二行显示</span></div><div class="line">	&#123;write_data(table1[num]);    <span class="comment">//0.0195</span></div><div class="line">		sdelay(<span class="number">5</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h1><ul>
<li>对应电路图如下<br><img src="http://cdn1.snapgram.co/imgs/2016/07/09/QQ.jpg" alt="QQ.jpg"><h2 id="shu-h"><a href="#shu-h" class="headerlink" title="shu.h"></a>shu.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*模 块 名：           数码管           */</span></div><div class="line"></div><div class="line"><span class="comment">/*创 建 人：zy       日期：2014-07-01 */</span></div><div class="line"></div><div class="line"><span class="comment">/*版 本1.2	                            */</span></div><div class="line"></div><div class="line"><span class="comment">/*使用方法：调用 Shu_Display(double js)函数，输入一个double类型数据，</span></div><div class="line">  固定显示格式为小数点前4位及小数点后两位。                             */</div><div class="line"></div><div class="line"><span class="comment">/*BUG：显示小数点后第二位时，有时会与输入值小1.原因疑似与fmod()函数有关 */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stc12c5a60s2.h&gt;      </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrins.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> uint unsigned int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> uchar unsigned char</span></div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">//端口定义</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> io_dm P0         <span class="comment">//定义LED显示的段码数据脚</span></span></div><div class="line">sbit io_shu = P2^<span class="number">3</span>;      <span class="comment">//数码管开关低电平有效</span></div><div class="line">sbit io_A   = P2^<span class="number">0</span>;		 <span class="comment">//3-8译码器输入</span></div><div class="line">sbit io_B   = P2^<span class="number">1</span>;</div><div class="line">sbit io_C   = P2^<span class="number">2</span>;</div><div class="line"></div><div class="line">sbit io_DP  = P0^<span class="number">7</span>;		 <span class="comment">//dp点定义</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">extern</span> uchar du_num[<span class="number">15</span>];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_1ms</span><span class="params">(uchar x)</span></span>;    <span class="comment">//1ms延迟函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wei</span><span class="params">(uchar i)</span></span>;			<span class="comment">//位选输出函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shu_Display</span><span class="params">(<span class="keyword">double</span> js)</span></span>;<span class="comment">//数码管显示函数</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="shu-c"><a href="#shu-c" class="headerlink" title="shu.c"></a>shu.c</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;shu.h&gt;   </span></span></div><div class="line"></div><div class="line"><span class="comment">/*模 块 名：          数码管           */</span></div><div class="line"></div><div class="line"><span class="comment">/*创 建 人：zy       日期：2014-07-01 */</span></div><div class="line"></div><div class="line"><span class="comment">/*版 本1.2	                            */</span></div><div class="line"></div><div class="line"><span class="comment">//显示数字</span></div><div class="line">uchar du_num[]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>,<span class="number">0x77</span>,<span class="number">0x7c</span>,<span class="number">0x39</span>,<span class="number">0x5e</span>,<span class="number">0x79</span>,<span class="number">0x71</span>&#125;;</div><div class="line"><span class="comment">//                0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f </span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_1ms</span><span class="params">(uchar x)</span><span class="comment">//1ms延迟函数</span></span></div><div class="line">&#123;</div><div class="line">    uchar j;</div><div class="line">    <span class="keyword">while</span>(x--)&#123;</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">125</span>;j++)</div><div class="line">            &#123;;&#125;</div><div class="line">        &#125;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wei</span><span class="params">(uchar i)</span>		<span class="comment">//位选信号输入</span></span></div><div class="line">&#123;	<span class="comment">//i=i+1;</span></div><div class="line">	<span class="keyword">switch</span> (i)</div><div class="line">	&#123; <span class="keyword">case</span> <span class="number">0</span>:&#123;io_A=<span class="number">0</span>;io_B=<span class="number">0</span>;io_C=<span class="number">0</span>;&#125;  <span class="keyword">break</span>;   </div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:&#123;io_A=<span class="number">1</span>;io_B=<span class="number">0</span>;io_C=<span class="number">0</span>;&#125;  <span class="keyword">break</span>; </div><div class="line">	  <span class="keyword">case</span> <span class="number">2</span>:&#123;io_A=<span class="number">0</span>;io_B=<span class="number">2</span>;io_C=<span class="number">0</span>;&#125;  <span class="keyword">break</span>; </div><div class="line">	  <span class="keyword">case</span> <span class="number">3</span>:&#123;io_A=<span class="number">1</span>;io_B=<span class="number">1</span>;io_C=<span class="number">0</span>;&#125;  <span class="keyword">break</span>; </div><div class="line">	  <span class="keyword">case</span> <span class="number">4</span>:&#123;io_A=<span class="number">0</span>;io_B=<span class="number">0</span>;io_C=<span class="number">1</span>;&#125;  <span class="keyword">break</span>; </div><div class="line">	  <span class="keyword">case</span> <span class="number">5</span>:&#123;io_A=<span class="number">1</span>;io_B=<span class="number">0</span>;io_C=<span class="number">1</span>;&#125;  <span class="keyword">break</span>; </div><div class="line">	  <span class="keyword">case</span> <span class="number">6</span>:&#123;io_A=<span class="number">0</span>;io_B=<span class="number">1</span>;io_C=<span class="number">1</span>;&#125;  <span class="keyword">break</span>; </div><div class="line">     </div><div class="line">	  <span class="keyword">default</span>: ; <span class="keyword">break</span>; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">/*********************************************************************</span></div><div class="line">*</div><div class="line">* 函 数 名: Shu_Display() </div><div class="line">* 功能描述: 将数字显示到数码管上，显示格式4+2</div><div class="line">* 函数说明: 段选位选，动态刷新数码管</div><div class="line">* 调用函数: delay_1ms  fmod()</div><div class="line">* 全局变量: 无</div><div class="line">* 输 入:    1个double类型数据</div><div class="line">* 返 回:    无</div><div class="line">* 设 计 者：zy 日期：2014-07-01 </div><div class="line">* 修 改 者：zy 日期：2016-07-08</div><div class="line">* 版 本：   1.2</div><div class="line">***********************************************************************/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shu_Display</span><span class="params">(<span class="keyword">double</span> js)</span></span></div><div class="line">&#123;uchar i;                  <span class="comment">//循环变量</span></div><div class="line"> <span class="keyword">static</span> uchar  suff[<span class="number">6</span>];	   <span class="comment">//数据处理暂存数组</span></div><div class="line"> <span class="keyword">static</span> uint   cuff[<span class="number">4</span>];	   <span class="comment">//提取各位有关</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">double</span>  n=<span class="number">1</span>,y; 	   <span class="comment">//与小数截取有关</span></div><div class="line"> <span class="keyword">static</span>  uint count;		   <span class="comment">//暂存</span></div><div class="line"> </div><div class="line"> y=<span class="built_in">fmod</span>(js,n);			   <span class="comment">//分离js小数部分 存在y中</span></div><div class="line"></div><div class="line"> count=js;				   <span class="comment">//强制类型转换，取js整数部分</span></div><div class="line"></div><div class="line"> suff[<span class="number">0</span>] = count/<span class="number">1000</span>;	   <span class="comment">//取千位</span></div><div class="line"> cuff[<span class="number">0</span>] = count%<span class="number">1000</span>;</div><div class="line"></div><div class="line"> suff[<span class="number">1</span>] = cuff[<span class="number">0</span>]/<span class="number">100</span>;	   <span class="comment">//取百位</span></div><div class="line"> cuff[<span class="number">1</span>] = cuff[<span class="number">0</span>]%<span class="number">100</span>;</div><div class="line"></div><div class="line"> suff[<span class="number">2</span>] = cuff[<span class="number">1</span>]/<span class="number">10</span>;	   <span class="comment">//取十位</span></div><div class="line"> suff[<span class="number">3</span>] = cuff[<span class="number">1</span>]%<span class="number">10</span>;	   <span class="comment">//取个位</span></div><div class="line"></div><div class="line"> count	 = y*<span class="number">1000</span>;		   <span class="comment">//小数部分。扩大1000倍提取。</span></div><div class="line"> </div><div class="line"> cuff[<span class="number">2</span>] = count%<span class="number">1000</span>;</div><div class="line"></div><div class="line"> suff[<span class="number">4</span>] = cuff[<span class="number">2</span>]/<span class="number">100</span>;	   <span class="comment">//小数点后一位</span></div><div class="line"> cuff[<span class="number">3</span>] = cuff[<span class="number">2</span>]%<span class="number">100</span>;</div><div class="line"></div><div class="line"> suff[<span class="number">5</span>] = cuff[<span class="number">3</span>]/<span class="number">10</span>;	  <span class="comment">//小数点后2位</span></div><div class="line"></div><div class="line"> io_shu=<span class="number">0</span>;			      <span class="comment">//打开3-8译码器</span></div><div class="line"></div><div class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</div><div class="line">   &#123;</div><div class="line">    wei(i);               <span class="comment">//位选</span></div><div class="line">	io_dm=du_num[suff[i]];<span class="comment">//段选</span></div><div class="line">	<span class="keyword">if</span>(i==<span class="number">3</span>) io_DP=<span class="number">1</span>;</div><div class="line">	delay_1ms(<span class="number">1</span>);	      <span class="comment">//延迟</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;累死人的单片机课程设计终于结束了，忙了两天多。就是个数码管+ADC。看看自己两年多前写的程序。。这感觉。用了一天多重构。。。。之前写程序的那个乱啊。。。重新整理下，自己的库函数。记录于此。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1602库函数&quot;&gt;&lt;a href=&quot;#1602库函
    
    </summary>
    
      <category term="电子类" scheme="http://yoursite.com/categories/%E7%94%B5%E5%AD%90%E7%B1%BB/"/>
    
    
      <category term="单片机" scheme="http://yoursite.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="开源" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
</feed>
